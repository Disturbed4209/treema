{"version":3,"file":"dev/js/treema.js","sources":["src/base.coffee","src/core.coffee","src/extra.coffee","src/plugin.coffee"],"names":[],"mappings":"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","sourcesContent":["class TreemaNode\n  # Abstract node class\n\n  # constructor defined\n  schema: {}\n  $el: null\n  data: null\n  options: null\n  parent: null\n  \n  # templates\n  nodeTemplate: '<div class=\"treema-row\"><div class=\"treema-value\"></div></div>'\n  childrenTemplate: '<div class=\"treema-children\"></div>'\n  addChildTemplate: '<div class=\"treema-add-child\" tabindex=\"9009\">+</div>'\n  tempErrorTemplate: '<span class=\"treema-temp-error\"></span>'\n  toggleTemplate: '<span class=\"treema-toggle\"></span>'\n  keyTemplate: '<span class=\"treema-key\"></span>'\n  errorTemplate: '<div class=\"treema-error\"></div>'\n  newPropertyTemplate: '<input class=\"treema-new-prop\" />'\n\n# behavior settings (overridden by subclasses)\n  collection: false      # acts like an array or object\n  ordered: false         # acts like an array\n  keyed: false           # acts like an object\n  editable: true         # can be changed\n  directlyEditable: true # can be changed at this level directly\n  skipTab: false         # is skipped over when tabbing between elements for editing\n  valueClass: null\n  \n  # dynamically managed properties\n  keyForParent: null\n  childrenTreemas: null\n  justCreated: true\n  removed: false\n\n  # Thin interface for tv4 ----------------------------------------------------\n  isValid: ->\n    return true unless @tv4\n    @tv4.validate(@data, @schema)\n    \n  getErrors: ->\n    return [] unless @tv4\n    @tv4.validateMultiple(@data, @schema)['errors']\n    \n  getMissing: ->\n    return [] unless @tv4\n    @tv4.validateMultiple(@data, @schema)['missing']\n\n  setUpValidator: ->\n    return @tv4 = window['tv4']?.freshApi() if not @parent\n    node = @\n    node = node.parent while node.parent\n    @tv4 = node.tv4\n\n  # Abstract functions --------------------------------------------------------\n  saveChanges: -> console.error('\"saveChanges\" has not been overridden.')\n  getDefaultValue: -> null\n  buildValueForDisplay: -> console.error('\"buildValueForDisplay\" has not been overridden.')\n  buildValueForEditing: ->\n    return unless @editable\n    console.error('\"buildValueForEditing\" has not been overridden.')\n  \n  # collection specific\n  getChildren: -> console.error('\"getChildren\" has not been overridden.') # should return a list of key-value-schema tuples\n  getChildSchema: -> console.error('\"getChildSchema\" has not been overridden.')\n  canAddChild: -> @collection and @editable\n  canAddProperty: -> true\n  addingNewProperty: -> false\n  addNewChild: -> false\n\n  # Subclass helper functions -------------------------------------------------\n  buildValueForDisplaySimply: (valEl, text) ->\n    text = text.slice(0,200) + '...' if text.length > 200\n    valEl.append($(\"<div></div>\").addClass('treema-shortened').text(text))\n\n  buildValueForEditingSimply: (valEl, value, inputType=null) ->\n    input = $('<input />')\n    input.attr('type', inputType) if inputType\n    input.val(value) unless value is null\n    valEl.append(input)\n    input.focus().select()\n    input.blur @onEditInputBlur\n    input\n\n  onEditInputBlur: =>\n    shouldRemove = @shouldTryToRemoveFromParent()\n    @markAsChanged()\n    @saveChanges(@getValEl())\n    input = @getValEl().find('input, textarea, select')\n    if @isValid() then @display() if @isEditing() else input.focus().select()\n    if shouldRemove then @remove() else @flushChanges()\n    @broadcastChanges()\n    \n  shouldTryToRemoveFromParent: ->\n    val = @getValEl()\n    return if val.find('select').length\n    inputs = val.find('input, textarea')\n    for input in inputs\n      input = $(input)\n      return false if input.attr('type') is 'checkbox' or input.val()\n    return true\n\n  limitChoices: (options) ->\n    @enum = options\n    @buildValueForEditing = (valEl) =>\n      input = $('<select></select>')\n      input.append($('<option></option>').text(option)) for option in @enum\n      index = @enum.indexOf(@data)\n      input.prop('selectedIndex', index) if index >= 0\n      valEl.append(input)\n      input.focus()\n      input.blur @onEditInputBlur\n      input\n      \n    @saveChanges = (valEl) =>\n      index = valEl.find('select').prop('selectedIndex')\n      @data = @enum[index]\n      TreemaNode.changedTreemas.push(@)\n      @broadcastChanges()\n\n  # Initialization ------------------------------------------------------------\n  @pluginName = \"treema\"\n  defaults =\n    schema: {}\n    callbacks: {}\n\n  constructor: (@$el, options, @parent) ->\n    @$el = @$el or $('<div></div>')\n    @settings = $.extend {}, defaults, options\n    @schema = @settings.schema\n    @data = options.data\n    @patches = []\n    @callbacks = @settings.callbacks\n    @_defaults = defaults\n    @_name = TreemaNode.pluginName\n    @setUpValidator()\n    @populateData()\n    @previousState = @copyData()\n\n  build: ->\n    @$el.addClass('treema-node').addClass('treema-clearfix')\n    @$el.empty().append($(@nodeTemplate))\n    @$el.data('instance', @)\n    @$el.addClass('treema-root') unless @parent\n    @$el.attr('tabindex', 9001) unless @parent\n    @justCreated = false unless @parent\n    @$el.append($(@childrenTemplate)).addClass('treema-closed') if @collection\n    valEl = @getValEl()\n    valEl.addClass(@valueClass) if @valueClass\n    valEl.addClass('treema-display') if @directlyEditable\n    @buildValueForDisplay(valEl)\n    @open() if @collection and not @parent\n    @setUpGlobalEvents() unless @parent\n    @setUpLocalEvents() if @parent\n    @updateMyAddButton() if @collection\n    @limitChoices(@schema.enum) if @schema.enum\n    @$el\n    \n  populateData: ->\n    @data = @data or @schema.default or @getDefaultValue()\n\n  # Event handling ------------------------------------------------------------\n  setUpGlobalEvents: ->\n    @$el.dblclick (e) => $(e.target).closest('.treema-node').data('instance')?.onDoubleClick(e)\n    \n    @$el.click (e) =>\n      $(e.target).closest('.treema-node').data('instance')?.onClick(e)\n      @broadcastChanges(e)\n      \n    @$el.keydown (e) =>\n      $(e.target).closest('.treema-node').data('instance')?.onKeyDown(e)\n      @broadcastChanges(e)\n\n  broadcastChanges: (e) ->\n    if @callbacks.select and TreemaNode.didSelect\n      TreemaNode.didSelect = false\n      @callbacks.select(e, @getSelectedTreemas())\n    if TreemaNode.changedTreemas.length\n      changes = (t for t in TreemaNode.changedTreemas when not t.removed)\n      @callbacks.change?(e, jQuery.unique(changes))\n      TreemaNode.changedTreemas = []\n      \n  markAsChanged: ->\n    TreemaNode.changedTreemas.push(@)\n\n  setUpLocalEvents: ->\n    row = @$el.find('> .treema-row')\n    row.mouseenter @onMouseEnter if @callbacks.mouseenter?\n    row.mouseleave @onMouseLeave if @callbacks.mouseleave?\n\n  onMouseEnter: (e) => @callbacks.mouseenter(e, @)\n  onMouseLeave: (e) => @callbacks.mouseleave(e, @)\n    \n  onClick: (e) ->\n    return if e.target.nodeName in ['INPUT', 'TEXTAREA']\n    clickedValue = $(e.target).closest('.treema-value').length  # Clicks are in children of .treema-value nodes\n    clickedToggle = $(e.target).hasClass('treema-toggle')\n    usedModKey = e.shiftKey or e.ctrlKey or e.metaKey\n    @keepFocus() unless clickedValue and not @collection\n    return @toggleEdit() if @isDisplaying() and clickedValue and @canEdit() and not usedModKey\n    if not usedModKey and (clickedToggle or (clickedValue and @collection))\n      if not clickedToggle\n        @deselectAll()\n        @select() \n      return @toggleOpen()\n    return @addNewChild() if $(e.target).closest('.treema-add-child').length and @collection\n    return if @isRoot() or @isEditing()\n    return @shiftSelect() if e.shiftKey\n    return @toggleSelect() if e.ctrlKey or e.metaKey\n    return @select()\n    \n  onDoubleClick: (e) ->\n    return unless @collection\n    clickedKey = $(e.target).hasClass('treema-key')\n    return unless clickedKey\n    @open() if @isClosed()\n    @addNewChild()\n\n  onKeyDown: (e) ->\n    @onEscapePressed(e) if e.which is 27\n    @onTabPressed(e) if e.which is 9\n    @onLeftArrowPressed(e) if e.which is 37\n    @onUpArrowPressed(e) if e.which is 38\n    @onRightArrowPressed(e) if e.which is 39\n    @onDownArrowPressed(e) if e.which is 40\n    @onEnterPressed(e) if e.which is 13\n    @onNPressed(e) if e.which is 78\n    @onSpacePressed(e) if e.which is 32\n    @onTPressed(e) if e.which is 84\n    @onFPressed(e) if e.which is 70\n    @onDeletePressed(e) if e.which is 8\n\n  # Default keyboard behaviors ------------------------------------------------\n    \n  onLeftArrowPressed: (e) ->\n    @navigateOut() unless @editingIsHappening() or @addingNewProperty()\n    e.preventDefault()\n    \n  onRightArrowPressed: (e) ->\n    @navigateIn() unless @editingIsHappening() or @addingNewProperty()\n    e.preventDefault()\n    \n  onUpArrowPressed: (e) ->\n    @navigateSelection(-1) unless @editingIsHappening() or @addingNewProperty()\n    e.preventDefault()\n    \n  onDownArrowPressed: (e) ->\n    @navigateSelection(1) unless @editingIsHappening() or @addingNewProperty()\n    e.preventDefault()\n    \n  onSpacePressed: ->\n  onTPressed: ->\n  onFPressed: ->\n    \n  onDeletePressed: (e) ->\n    if @editingIsHappening() and not $(e.target).val()\n      @display()\n      @select()\n      @removeSelectedNodes()\n      e.preventDefault()\n    return if e.target.nodeName in ['INPUT', 'TEXTAREA']\n    e.preventDefault()\n    @removeSelectedNodes()\n\n  onEscapePressed: ->\n    return unless @isEditing()\n    return @remove() if @justCreated\n    @display() if @isEditing()\n    @select() unless @isRoot()\n    @getRootEl().focus()\n\n  onEnterPressed: (e) ->\n    offset = if e.shiftKey then -1 else 1\n    return @addNewChild() if offset is 1 and $(e.target).hasClass('treema-add-child')\n    @traverseWhileEditing(offset, true)\n    \n  onTabPressed: (e) ->\n    offset = if e.shiftKey then -1 else 1\n    return if @hasMoreInputs(offset)\n    e.preventDefault()\n    @traverseWhileEditing(offset, false)\n\n  hasMoreInputs: (offset) ->\n    inputs = @getInputs().toArray()\n    inputs = inputs.reverse() if offset < 0\n    passedFocusedEl = false\n    for input in inputs\n      if input is document.activeElement\n        passedFocusedEl = true\n        continue\n      continue unless passedFocusedEl\n      return true\n    return false\n\n  onNPressed: (e) ->\n    return if @editingIsHappening()\n    selected = @getLastSelectedTreema()\n    target = if selected?.collection then selected else selected?.parent\n    return unless target\n    success = target.addNewChild()\n    @deselectAll() if success\n    e.preventDefault()\n\n  # Tree traversing/navigation ------------------------------------------------\n  # (traversing means editing and adding fields, pressing enter and tab)\n  # (navigation means selecting fields, pressing arrow keys)\n  \n  traverseWhileEditing: (offset, aggressive) ->\n    shouldRemove = false\n    selected = @getLastSelectedTreema()\n    editing = @isEditing()\n    return selected.edit() if not editing and selected?.canEdit()\n    \n    if editing\n      shouldRemove = @shouldTryToRemoveFromParent()\n      @saveChanges(@getValEl())\n      @flushChanges() unless shouldRemove\n      unless aggressive or @isValid()\n        @parent.refreshErrors()\n        return\n      if shouldRemove and $(@$el[0].nextSibling)?.hasClass('treema-add-child') and offset is 1\n        offset = 2\n      @endExistingEdits()\n      @select()\n    \n    ctx = @traversalContext(offset)\n    return @getRoot().addChild() unless ctx\n    if not ctx.origin\n      targetEl = if offset > 0 then ctx.first else ctx.last\n      @selectOrActivateElement(targetEl)\n      \n    selected = $(ctx.origin).data('instance')\n    if offset > 0 and aggressive and selected.collection and selected.isClosed()\n      return selected.open()\n\n    targetEl = if offset > 0 then ctx.next else ctx.prev\n    if not targetEl\n      targetEl = if offset > 0 then ctx.first else ctx.last\n    @selectOrActivateElement(targetEl)\n    if shouldRemove then @remove() else @refreshErrors()\n\n  selectOrActivateElement: (el) ->\n    el = $(el)\n    treema = el.data('instance')\n    if treema\n      return if treema.canEdit() then treema.edit() else treema.select()\n      \n    # otherwise it must be an 'add' element\n    @deselectAll()\n    el.focus()\n    \n  navigateSelection: (offset) ->\n    ctx = @navigationContext()\n    return unless ctx\n    if not ctx.origin\n      targetTreema = if offset > 0 then ctx.first else ctx.last\n      return targetTreema.select()\n    targetTreema = if offset > 0 then ctx.next else ctx.prev\n    if not targetTreema\n      targetTreema = if offset > 0 then ctx.first else ctx.last\n    targetTreema?.select()\n\n  navigateOut: ->\n    selected = @getLastSelectedTreema()\n    return if not selected\n    return selected.close() if selected.isOpen()\n    return if (not selected.parent) or selected.parent.isRoot()\n    selected.parent.select()\n\n  navigateIn: ->\n    for treema in @getSelectedTreemas()\n      continue unless treema.collection\n      treema.open() if treema.isClosed()\n      \n  traversalContext: (offset) ->\n    list = @getNavigableElements(offset)\n    origin = @getLastSelectedTreema()?.$el[0]\n    origin = @getRootEl().find('.treema-add-child:focus')[0] if not origin\n    origin = @getRootEl().find('.treema-new-prop')[0] if not origin\n    @wrapContext(list, origin, offset)\n      \n  navigationContext: ->\n    list = @getVisibleTreemas()\n    origin = @getLastSelectedTreema()\n    @wrapContext(list, origin)\n    \n  wrapContext: (list, origin, offset=1) ->\n    return unless list.length\n    c =\n      first: list[0]\n      last: list[list.length-1]\n      origin: origin\n    if origin\n      offset = Math.abs(offset)\n      originIndex = list.indexOf(origin)\n      c.next = list[originIndex+offset]\n      c.prev = list[originIndex-offset]\n    return c\n    \n  # Undo/redo -----------------------------------------------------------------\n\n  # TODO: implement undo/redo, including saving and restoring which nodes are open\n  \n#  patches: []\n#  patchIndex: 0\n#  previousState: null\n#\n#  saveState: ->\n#    @patches = @patches.slice(@patchIndex)\n#    @patchIndex = 0\n#    @patches.splice(0, 0, jsondiffpatch.diff(@previousState, @data))\n#    @previousState = @copyData()\n#    @patches = @patches[..10]\n#  \n#  undo: ->\n#    return unless @patches[@patchIndex]\n#    jsondiffpatch.unpatch(@previousState, @patches[@patchIndex])\n    \n\n  # Editing values ------------------------------------------------------------\n  canEdit: ->\n    return false if not @editable\n    return false if not @directlyEditable\n    return false if @collection and @isOpen()\n    return true\n\n  display: ->\n    @toggleEdit('treema-display')\n\n  edit: (options={}) ->\n    @toggleEdit('treema-edit')\n    @focusLastInput() if options.offset? and options.offset < 0\n    \n  toggleEdit: (toClass=null) ->\n    return unless @editable\n    valEl = @getValEl()\n    return if toClass and valEl.hasClass(toClass)\n    toClass = toClass or (if valEl.hasClass('treema-display') then 'treema-edit' else 'treema-display')\n    @endExistingEdits() if toClass is 'treema-edit'\n    valEl.removeClass('treema-display').removeClass('treema-edit').addClass(toClass)\n\n    valEl.empty()\n    @buildValueForDisplay(valEl) if @isDisplaying()\n\n    if @isEditing()\n      @buildValueForEditing(valEl)\n      @deselectAll()\n\n  endExistingEdits: ->\n    editing = @getRootEl().find('.treema-edit').closest('.treema-node')\n    for elem in editing\n      treema = $(elem).data('instance')\n      treema.saveChanges(treema.getValEl())\n      treema.display()\n      @markAsChanged()\n      \n  flushChanges: ->\n    @parent.integrateChildTreema(@) if @parent and @justCreated\n    @justCreated = false\n    @markAsChanged()\n    return @refreshErrors() unless @parent\n    @parent.data[@keyForParent] = @data\n    @parent.refreshErrors()\n    @parent.buildValueForDisplay(@parent.getValEl().empty())\n    \n  focusLastInput: ->\n    inputs = @getInputs()\n    last = inputs[inputs.length-1]\n    $(last).focus().select()\n    \n  # Removing nodes ------------------------------------------------------------\n  removeSelectedNodes: ->\n    selected = @getSelectedTreemas()\n    toSelect = null\n    if selected.length is 1\n      nextSibling = selected[0].$el.next('.treema-node').data('instance')\n      prevSibling = selected[0].$el.prev('.treema-node').data('instance')\n      toSelect = nextSibling or prevSibling or selected[0].parent\n    treema.remove() for treema in selected\n    toSelect.select() if toSelect and not @getSelectedTreemas().length\n\n  remove: ->\n    required = @parent and @parent.schema.required? and @keyForParent in @parent.schema.required\n    if required\n      tempError = @createTemporaryError('required')\n      @$el.prepend(tempError)\n      return false\n\n    root = @getRootEl()\n    @$el.remove()\n    @removed = true\n    root.focus() if document.activeElement is $('body')[0]\n    return true unless @parent?\n    delete @parent.childrenTreemas[@keyForParent]\n    delete @parent.data[@keyForParent]\n    @parent.orderDataFromUI() if @parent.ordered\n    @parent.refreshErrors()\n    @parent.updateMyAddButton()\n    @parent.markAsChanged()\n    @parent.buildValueForDisplay(@parent.getValEl().empty())\n    @broadcastChanges()\n    return true\n\n  # Opening/closing collections -----------------------------------------------\n  toggleOpen: ->\n    if @isClosed() then @open() else @close()\n    @\n\n  open: ->\n    return unless @isClosed()\n    childrenContainer = @$el.find('.treema-children').detach()\n    childrenContainer.empty()\n    @childrenTreemas = {}\n    for [key, value, schema] in @getChildren()\n      treema = TreemaNode.make(null, {schema: schema, data:value}, @, key)\n      @integrateChildTreema(treema)\n      childNode = @createChildNode(treema)\n      childrenContainer.append(childNode)\n    @$el.append(childrenContainer).removeClass('treema-closed').addClass('treema-open')\n    childrenContainer.append($(@addChildTemplate))\n    if @ordered and childrenContainer.sortable\n      childrenContainer.sortable?(deactivate: @orderDataFromUI).disableSelection?()\n    @refreshErrors()\n\n  orderDataFromUI: =>\n    children = @$el.find('> .treema-children > .treema-node')\n    index = 0\n    @childrenTreemas = {}  # rebuild it\n    @data = if $.isArray(@data) then [] else {}\n    for child in children\n      treema = $(child).data('instance')\n      continue unless treema\n      treema.keyForParent = index\n      @childrenTreemas[index] = treema\n      @data[index] = treema.data\n      index += 1\n    @flushChanges()\n\n  close: ->\n    return unless @isOpen()\n    @data[key] = treema.data for key, treema of @childrenTreemas\n    @$el.find('.treema-children').empty()\n    @$el.addClass('treema-closed').removeClass('treema-open')\n    @childrenTreemas = null\n    @refreshErrors()\n    @buildValueForDisplay(@getValEl().empty())\n\n  # Selecting/deselecting nodes -----------------------------------------------\n  select: ->\n    numSelected = @getSelectedTreemas().length\n    # if we have multiple selected, we want this row to be selected at the end\n    excludeSelf = numSelected is 1 \n    @deselectAll(excludeSelf)\n    @toggleSelect()\n    @keepFocus()\n    TreemaNode.didSelect = true\n    \n  deselectAll: (excludeSelf=false) ->\n    for treema in @getSelectedTreemas()\n      continue if excludeSelf and treema is @\n      treema.$el.removeClass('treema-selected')\n    @clearLastSelected()\n    TreemaNode.didSelect = true\n\n  toggleSelect: ->\n    @clearLastSelected()\n    @$el.toggleClass('treema-selected') unless @isRoot()\n    @$el.addClass('treema-last-selected') if @isSelected()\n    TreemaNode.didSelect = true\n    \n  clearLastSelected: ->\n    @getRootEl().find('.treema-last-selected').removeClass('treema-last-selected')\n      \n  shiftSelect: ->\n    lastSelected = @getRootEl().find('.treema-last-selected')\n    @select() if not lastSelected.length\n    @deselectAll()\n    allNodes = @getRootEl().find('.treema-node')\n    started = false\n    for node in allNodes\n      node = $(node).data('instance')\n      if not started\n        started = true if node is @ or node.wasSelectedLast()\n        node.$el.addClass('treema-selected') if started\n        continue\n      break if started and (node is @ or node.wasSelectedLast())\n      node.$el.addClass('treema-selected')\n    @$el.addClass('treema-selected')\n    lastSelected.addClass('treema-selected')\n    lastSelected.removeClass('treema-last-selected')\n    @$el.addClass('treema-last-selected')\n    TreemaNode.didSelect = true\n\n  # Child node utilities ------------------------------------------------------\n  integrateChildTreema: (treema) ->\n    treema.justCreated = false # no longer in limbo\n    @childrenTreemas[treema.keyForParent] = treema\n    treema.populateData()\n    @data[treema.keyForParent] = treema.data\n    treema\n    \n  createChildNode: (treema) ->\n    childNode = treema.build()\n    row = childNode.find('.treema-row')\n    if @collection and @keyed\n      name = treema.schema.title or treema.keyForParent\n      keyEl = $(@keyTemplate).text(name)\n      keyEl.attr('title', treema.schema.description) if treema.schema.description\n      row.prepend(' : ')\n      required = @schema.required or []\n      keyEl.text(keyEl.text()+'*') if treema.keyForParent in required \n      row.prepend(keyEl)\n    childNode.prepend($(@toggleTemplate)) if treema.collection\n    childNode\n\n  # Validation errors ---------------------------------------------------------\n  refreshErrors: ->\n    @clearErrors()\n    @showErrors()\n\n  showErrors: ->\n    return if @justCreated\n    errors = @getErrors()\n    erroredTreemas = []\n    for error in errors\n      path = error.dataPath.split('/').slice(1)\n      deepestTreema = @\n      for subpath in path\n        unless deepestTreema.childrenTreemas\n          error.forChild = true\n          break \n        subpath = parseInt(subpath) if deepestTreema.ordered\n        deepestTreema = deepestTreema.childrenTreemas[subpath]\n      deepestTreema._errors = [] unless deepestTreema._errors and deepestTreema in erroredTreemas\n      deepestTreema._errors.push(error)\n      erroredTreemas.push(deepestTreema)\n\n    for treema in $.unique(erroredTreemas)\n      childErrors = (e for e in treema._errors when e.forChild)\n      ownErrors = (e for e in treema._errors when not e.forChild)\n      messages = (e.message for e in ownErrors)\n      if childErrors.length > 0\n        message = \"[#{childErrors.length}] error\"\n        message = message + 's' if childErrors.length > 1\n        messages.push(message)\n        \n      treema.showError(messages.join('<br />'))\n\n  showError: (message) ->\n    @$el.prepend($(@errorTemplate))\n    @$el.find('> .treema-error').html(message).show()\n    @$el.addClass('treema-has-error')\n\n  clearErrors: ->\n    @$el.find('.treema-error').remove()\n    @$el.find('.treema-has-error').removeClass('treema-has-error')\n    @$el.removeClass('treema-has-error')\n\n  createTemporaryError: (message, attachFunction=null) ->\n    attachFunction = @$el.prepend unless attachFunction\n    @clearTemporaryErrors()\n    return $(@tempErrorTemplate).text(message).delay(3000).fadeOut(1000, -> $(@).remove())\n    \n  clearTemporaryErrors: -> @getRootEl().find('.treema-temp-error').remove()\n    \n  # Utilities -----------------------------------------------------------------\n\n  getValEl: -> @$el.find('> .treema-row .treema-value')\n  getRootEl: -> @$el.closest('.treema-root')\n  getRoot: -> @$el.closest('.treema-root').data('instance')\n  getInputs: -> @getValEl().find('input, textarea')\n  getSelectedTreemas: -> ($(el).data('instance') for el in @getRootEl().find('.treema-selected'))\n  getLastSelectedTreema: -> @getRootEl().find('.treema-last-selected').data('instance')\n  getAddButtonEl: -> @$el.find('> .treema-children > .treema-add-child')\n  getVisibleTreemas: -> ($(el).data('instance') for el in @getRootEl().find('.treema-node'))\n  getNavigableElements: ->\n    @getRootEl().find('.treema-node, .treema-add-child:visible').toArray()\n  getPath: ->\n    pathPieces = []\n    pointer = @\n    while pointer and pointer.keyForParent?\n      pathPieces.push(pointer.keyForParent+'')\n      pointer = pointer.parent\n    pathPieces.reverse()\n    return '/' + pathPieces.join('/')\n    \n  isRoot: -> @$el.hasClass('treema-root')\n  isEditing: -> @getValEl().hasClass('treema-edit')\n  isDisplaying: -> @getValEl().hasClass('treema-display')\n  isOpen: -> @$el.hasClass('treema-open')\n  isClosed: -> @$el.hasClass('treema-closed')\n  isSelected: -> @$el.hasClass('treema-selected')\n  wasSelectedLast: -> @$el.hasClass('treema-last-selected')\n  editingIsHappening: -> @getRootEl().find('.treema-edit').length\n  rootSelected: -> $(document.activeElement).hasClass('treema-root')\n\n  keepFocus: -> @getRootEl().focus()\n  copyData: -> $.extend(null, {}, {'d': @data})['d']\n  updateMyAddButton: ->\n    @$el.removeClass('treema-full')\n    @$el.addClass('treema-full') unless @canAddChild()\n\n  @nodeMap: {}\n  \n  @setNodeSubclass: (key, NodeClass) -> @nodeMap[key] = NodeClass\n    \n  @getNodeClassForSchema: (schema) ->\n    NodeClass = null\n    NodeClass = @nodeMap[schema.format] if schema.format\n    return NodeClass if NodeClass\n    NodeClass = @nodeMap[schema.type] if schema.type\n    return NodeClass if NodeClass\n    @nodeMap['any']\n    \n  @make: (element, options, parent, keyForParent) ->\n    NodeClass = @getNodeClassForSchema(options.schema)\n    newNode = new NodeClass(element, options, parent)\n    newNode.tv4 = parent.tv4 if parent?\n    newNode.keyForParent = keyForParent if keyForParent?\n    newNode\n    \n  @extend: (child) ->\n    # https://github.com/jashkenas/coffee-script/issues/2385\n    ctor = ->\n    ctor:: = @::\n    child:: = new ctor()\n    child::constructor = child\n    child.__super__ = @::\n  \n    # provides easy access to the given method on super (must use call or apply)\n    child::super = (method) -> @constructor.__super__[method]\n    child\n\n  @didSelect = false\n  @changedTreemas = []\n","do __init = ->\n  \n  TreemaNode.setNodeSubclass 'string', class StringNode extends TreemaNode\n    valueClass: 'treema-string'\n    getDefaultValue: -> ''\n    @inputTypes = ['color', 'date', 'datetime', 'datetime-local',\n                   'email', 'month', 'range', 'search',\n                   'tel', 'text', 'time', 'url', 'week']\n  \n    buildValueForDisplay: (valEl) -> @buildValueForDisplaySimply(valEl, \"\\\"#{@data}\\\"\")\n  \n    buildValueForEditing: (valEl) ->\n      input = @buildValueForEditingSimply(valEl, @data)\n      input.attr('maxlength', @schema.maxLength) if @schema.maxLength\n      input.attr('type', @schema.format) if @schema.format in StringNode.inputTypes\n  \n    saveChanges: (valEl) -> @data = $('input', valEl).val()\n\n\n\n  TreemaNode.setNodeSubclass 'number', class NumberNode extends TreemaNode\n    valueClass: 'treema-number'\n    getDefaultValue: -> 0\n  \n    buildValueForDisplay: (valEl) -> @buildValueForDisplaySimply(valEl, JSON.stringify(@data))\n  \n    buildValueForEditing: (valEl) ->\n      input = @buildValueForEditingSimply(valEl, JSON.stringify(@data), 'number')\n      input.attr('max', @schema.maximum) if @schema.maximum\n      input.attr('min', @schema.minimum) if @schema.minimum\n  \n    saveChanges: (valEl) -> @data = parseFloat($('input', valEl).val())\n\n\n\n  TreemaNode.setNodeSubclass 'null', NullNode = class NullNode extends TreemaNode\n    valueClass: 'treema-null'\n    editable: false\n    buildValueForDisplay: (valEl) -> @buildValueForDisplaySimply(valEl, 'null')\n\n\n\n  TreemaNode.setNodeSubclass 'boolean', class BooleanNode extends TreemaNode\n    valueClass: 'treema-boolean'\n    getDefaultValue: -> false\n  \n    buildValueForDisplay: (valEl) -> @buildValueForDisplaySimply(valEl, JSON.stringify(@data))\n  \n    buildValueForEditing: (valEl) ->\n      input = @buildValueForEditingSimply(valEl, JSON.stringify(@data))\n      $('<span></span>').text(JSON.stringify(@data)).insertBefore(input)\n      input.focus()\n  \n    toggleValue: (newValue=null) ->\n      @data = not @data\n      @data = newValue if newValue?\n      valEl = @getValEl().empty()\n      if @isDisplaying() then @buildValueForDisplay(valEl) else @buildValueForEditing(valEl)\n  \n    onSpacePressed: -> @toggleValue()\n    onFPressed: -> @toggleValue(false)\n    onTPressed: -> @toggleValue(true)\n    saveChanges: ->\n\n\n\n  TreemaNode.setNodeSubclass 'array', class ArrayNode extends TreemaNode\n    valueClass: 'treema-array'\n    getDefaultValue: -> []\n    collection: true\n    ordered: true\n    directlyEditable: false\n  \n    getChildren: -> ([key, value, @getChildSchema()] for value, key in @data)\n    getChildSchema: -> @schema.items or {}\n    buildValueForDisplay: (valEl) ->\n      text = []\n      return unless @data\n      for child in @data[..2]\n        helperTreema = TreemaNode.make(null, {schema: @getChildSchema(), data:child}, @)\n        val = $('<div></div>')\n        helperTreema.buildValueForDisplay(val)\n        text.push(val.text())\n      text.push('...') if @data.length > 3\n  \n      @buildValueForDisplaySimply(valEl, text.join(', '))\n  \n    buildValueForEditing: (valEl) -> @buildValueForEditingSimply(valEl, JSON.stringify(@data))\n  \n    canAddChild: ->\n      return false if @schema.additionalItems is false and @data.length >= @schema.items.length\n      return false if @schema.maxItems? and @data.length >= @schema.maxItems\n      return true\n  \n    addNewChild: ->\n      return unless @canAddChild()\n      @open() if @isClosed()\n      new_index = Object.keys(@childrenTreemas).length\n      schema = @getChildSchema()\n      newTreema = TreemaNode.make(undefined, {schema: schema, data:undefined}, @, new_index)\n      newTreema.justCreated = true\n      newTreema.tv4 = @tv4\n      childNode = @createChildNode(newTreema)\n      @getAddButtonEl().before(childNode)\n      if newTreema.canEdit() then newTreema.edit() else newTreema.select()\n      true\n\n\n\n  TreemaNode.setNodeSubclass 'object', class ObjectNode extends TreemaNode\n    valueClass: 'treema-object'\n    getDefaultValue: ->\n      d = {}\n      return d unless @schema?.properties\n      for childKey, childSchema of @schema.properties\n        d[childKey] = childSchema.default if childSchema.default\n      d\n\n    collection: true\n    keyed: true\n    directlyEditable: false\n  \n    getChildren: ->\n      # order based on properties object first\n      children = []\n      keysAccountedFor = []\n      if @schema.properties\n        for key of @schema.properties\n          continue if typeof @data[key] is 'undefined'\n          keysAccountedFor.push(key)\n          children.push([key, @data[key], @getChildSchema(key)])\n  \n      for key, value of @data\n        continue if key in keysAccountedFor\n        children.push([key, value, @getChildSchema(key)])\n      children\n  \n    getChildSchema: (key_or_title) ->\n      for key, child_schema of @schema.properties\n        return child_schema if key is key_or_title or child_schema.title is key_or_title\n      {}\n  \n    buildValueForDisplay: (valEl) ->\n      text = []\n      return unless @data\n      skipped = []\n      for key, value of @data\n        if @schema.displayProperty? and key isnt @schema.displayProperty\n          skipped.push(key)\n          continue\n          \n        helperTreema = TreemaNode.make(null, {schema: @getChildSchema(key), data:value}, @)\n        val = $('<div></div>')\n        helperTreema.buildValueForDisplay(val)\n        text.push(val.text())\n      @buildValueForDisplaySimply(valEl, '{' + text.join(', ') + '}')\n      \n    buildValueForEditing: (valEl) -> @buildValueForEditingSimply(valEl, JSON.stringify(@data))\n  \n    populateData: ->\n      super()\n      return unless @schema.required\n      for key in @schema.required\n        continue if @data[key]\n        helperTreema = TreemaNode.make(null, {schema: @getChildSchema(key), data:null}, @)\n        helperTreema.populateData()\n        @data[key] = helperTreema.data\n        \n    # adding children ---------------------------------------------------------\n    \n    addNewChild: ->\n      return unless @canAddChild()\n      @open() unless @isRoot()\n      properties = @childPropertiesAvailable()\n      keyInput = $(@newPropertyTemplate)\n      keyInput.blur @cleanupAddNewChild\n      keyInput.keydown (e) =>\n        @originalTargetValue = $(e.target).val()\n      keyInput.autocomplete?(source: properties, minLength: 0, delay: 0, autoFocus: true)\n      @getAddButtonEl().before(keyInput)\n      keyInput.focus()\n      keyInput.autocomplete('search')\n      true\n\n    canAddChild: ->\n      return false if @schema.maxProperties? and Object.keys(@data).length >= @schema.maxProperties\n      return true if @schema.additionalProperties isnt false\n      return true if @schema.patternProperties?\n      return true if @childPropertiesAvailable().length\n      return false\n\n    childPropertiesAvailable: ->\n      return [] unless @schema.properties\n      properties = []\n      for property, childSchema of @schema.properties\n        continue if @data[property]?\n        properties.push(childSchema.title or property)\n      properties.sort()\n      \n    # event handling when adding a new property -------------------------------\n  \n    onDeletePressed: (e) ->\n      return super(e) unless @addingNewProperty()\n      if not $(e.target).val()\n        @cleanupAddNewChild()\n        e.preventDefault()\n        @$el.find('.treema-add-child').focus()\n  \n    onEscapePressed: ->\n      @cleanupAddNewChild()\n  \n    onTabPressed: (e) ->\n      return super(e) unless @addingNewProperty()\n      e.preventDefault()\n      @tryToAddNewChild(e, false)\n\n    onEnterPressed: (e) ->\n      return super(e) unless @addingNewProperty()\n      @tryToAddNewChild(e, true)\n      \n    # new property behavior ---------------------------------------------------\n\n    tryToAddNewChild: (e, aggressive) ->\n      # empty input keep on moving on\n      if (not @originalTargetValue) and (not aggressive)\n        offset = if e.shiftKey then -1 else 1\n        @cleanupAddNewChild()\n        @$el.find('.treema-add-child').focus()\n        @traverseWhileEditing(offset)\n        return\n\n      keyInput = $(e.target)\n      key = @getPropertyKey($(e.target))\n\n      # invalid input, stay put and show an error\n      if key.length and not @canAddProperty(key)\n        @clearTemporaryErrors()\n        @showBadPropertyError(keyInput)\n        return\n\n      # if this is a prop we already have, just edit that instead\n      if @childrenTreemas[key]?\n        @cleanupAddNewChild()\n        treema = @childrenTreemas[key]\n        return if treema.canEdit() then treema.toggleEdit() else treema.select()\n        \n      # otherwise add the new child\n      @cleanupAddNewChild()\n      @addNewChildForKey(key)\n\n    getPropertyKey: (keyInput) ->\n      key = keyInput.val()\n      if @schema.properties\n        for child_key, child_schema of @schema.properties\n          key = child_key if child_schema.title is key\n      key\n\n    canAddProperty: (key) ->\n      return true unless @schema.additionalProperties is false\n      return true if @schema.properties[key]?\n      if @schema.patternProperties?\n        return true if RegExp(pattern).test(key) for pattern of @schema.patternProperties\n      return false\n\n    showBadPropertyError: (keyInput) ->\n      keyInput.focus()\n      tempError = @createTemporaryError('Invalid property name.')\n      tempError.insertAfter(keyInput)\n      return\n\n    addNewChildForKey: (key) ->\n      schema = @getChildSchema(key)\n      newTreema = TreemaNode.make(null, {schema: schema, data:null}, @, key)\n      childNode = @createChildNode(newTreema)\n      @findObjectInsertionPoint(key).before(childNode)\n      if newTreema.canEdit()\n        newTreema.edit()\n      else\n        @integrateChildTreema(newTreema)\n        newTreema.addNewChild()\n        \n      @updateMyAddButton()\n\n    findObjectInsertionPoint: (key) ->\n      # Object children should be in the order of the schema.properties objects as much as possible\n      return @getAddButtonEl() unless @schema.properties?[key]\n      allProps = Object.keys(@schema.properties)\n      afterKeys = allProps.slice(allProps.indexOf(key)+1)\n      allChildren = @$el.find('> .treema-children > .treema-node')\n      for child in allChildren\n        if $(child).data('instance').keyForParent in afterKeys\n          return $(child)\n      return @getAddButtonEl()\n\n    # adding utilities --------------------------------------------------------\n\n    cleanupAddNewChild: =>\n      @$el.find('.treema-new-prop').remove()\n      @clearTemporaryErrors()\n\n    addingNewProperty: -> document.activeElement is @$el.find('.treema-new-prop')[0]\n\n\n\n  TreemaNode.setNodeSubclass 'any', class AnyNode extends TreemaNode\n  \n    helper: null\n  \n    constructor: (splat...) ->\n      super(splat...)\n      @updateShadowMethods()\n  \n    buildValueForEditing: (valEl) -> @buildValueForEditingSimply(valEl, JSON.stringify(@data))\n    saveChanges: (valEl) ->\n      @data = $('input', valEl).val()\n      if @data[0] is \"'\" and @data[@data.length-1] isnt \"'\"\n        @data = @data[1..]\n      else if @data[0] is '\"' and @data[@data.length-1] isnt '\"'\n        @data = @data[1..]\n      else if @data.trim() is '['\n        @data = []\n      else if @data.trim() is '{'\n        @data = {}\n      else\n        try\n          @data = JSON.parse(@data)\n        catch e\n          console.log('could not parse data', @data)\n      @updateShadowMethods()\n      @rebuild()\n  \n    updateShadowMethods: ->\n      # This node takes on the behaviors of the other basic nodes.\n      NodeClass = TreemaNode.getNodeClassForSchema({type:$.type(@data)})\n      @helper = new NodeClass(@schema, @data, @parent)\n      @helper.tv4 = @tv4\n      for prop in ['collection', 'ordered', 'keyed', 'getChildSchema', 'getChildren', 'getChildSchema',\n                   'buildValueForDisplay', 'addNewChild']\n        @[prop] = @helper[prop]\n  \n    rebuild: ->\n      oldEl = @$el\n      if @parent\n        newNode = @parent.createChildNode(@)\n      else\n        newNode = @build()\n      @$el = newNode\n  \n    onClick: (e) ->\n      return if e.target.nodeName in ['INPUT', 'TEXTAREA']\n      clickedValue = $(e.target).closest('.treema-value').length  # Clicks are in children of .treema-value nodes\n      usedModKey = e.shiftKey or e.ctrlKey or e.metaKey\n      return @toggleEdit() if clickedValue and not usedModKey\n      super(e)\n","do ->\n  TreemaNode.setNodeSubclass 'point2d', class Point2DNode extends TreemaNode\n    valueClass: 'treema-point2d'\n    getDefaultValue: -> {x:0, y:0}\n  \n    buildValueForDisplay: (valEl) -> @buildValueForDisplaySimply(valEl, \"(#{@data.x}, #{@data.y})\")\n  \n    buildValueForEditing: (valEl) ->\n      xInput = $('<input />').val(@data.x)\n      yInput = $('<input />').val(@data.y)\n      valEl.append('(').append(xInput).append(', ').append(yInput).append(')')\n      valEl.find('input:first').focus().select()\n  \n    saveChanges: (valEl) ->\n      @data.x = parseFloat(valEl.find('input:first').val())\n      @data.y = parseFloat(valEl.find('input:last').val())\n  \n  TreemaNode.setNodeSubclass 'point3d', class Point3DNode extends TreemaNode\n    valueClass: 'treema-point3d'\n    getDefaultValue: -> {x:0, y:0, z:0}\n  \n    buildValueForDisplay: (valEl) ->\n      @buildValueForDisplaySimply(valEl, \"(#{@data.x}, #{@data.y}, #{@data.z})\")\n  \n    buildValueForEditing: (valEl) ->\n      xInput = $('<input />').val(@data.x)\n      yInput = $('<input />').val(@data.y)\n      zInput = $('<input />').val(@data.z)\n      valEl.append('(').append(xInput).append(', ').append(yInput).append(', ').append(zInput).append(')')\n      valEl.find('input:first').focus().select()\n  \n    saveChanges: ->\n      inputs = @getInputs()\n      @data.x = parseFloat($(inputs[0]).val())\n      @data.y = parseFloat($(inputs[1]).val())\n      @data.z = parseFloat($(inputs[2]).val())\n  \n  \n  class DatabaseSearchTreemaNode extends TreemaNode\n    valueClass: 'treema-search'\n    searchValueTemplate: '<input placeholder=\"Search\" /><div class=\"treema-search-results\"></div>'\n    url: null\n    lastTerm: null\n  \n    buildValueForDisplay: (valEl) ->\n      val = if @data then @formatDocument(@data) else 'None'\n      @buildValueForDisplaySimply(valEl, val)\n    \n    formatDocument: (doc) ->\n      return doc if $.isString(doc)\n      JSON.stringify(doc)\n  \n    buildValueForEditing: (valEl) ->\n      valEl.html(@searchValueTemplate)\n      input = valEl.find('input')\n      input.focus().keyup @search\n      input.attr('placeholder', @formatDocument(@data)) if @data\n  \n    search: =>\n      term = @getValEl().find('input').val()\n      return if term is @lastTerm\n      @getSearchResultsEl().empty() if @lastTerm and not term\n      return unless term\n      @lastTerm = term\n      @getSearchResultsEl().empty().append('Searching')\n      $.ajax(@url+'?term='+term, {dataType: 'json', success: @searchCallback})\n  \n    searchCallback: (results) =>\n      container = @getSearchResultsEl().detach().empty()\n      first = true\n      for result, i in results\n        row = $('<div></div>').addClass('treema-search-result-row')\n        text = @formatDocument(result)\n        continue unless text?\n        row.addClass('treema-search-selected') if first\n        first = false\n        row.text(text)\n        row.data('value', result)\n        container.append(row)\n      if not results.length\n        container.append($('<div>No results</div>'))\n      @getValEl().append(container)\n  \n    getSearchResultsEl: -> @getValEl().find('.treema-search-results')\n    getSelectedResultEl: -> @getValEl().find('.treema-search-selected')\n    \n    saveChanges: ->\n      selected = @getSelectedResultEl()\n      return unless selected.length\n      @data = selected.data('value')\n  \n    onDownArrowPressed: (e) ->\n      @navigateSearch(1)\n      e.preventDefault()\n      \n    onUpArrowPressed: (e) ->\n      e.preventDefault()\n      @navigateSearch(-1)\n  \n    navigateSearch: (offset) ->\n      selected = @getSelectedResultEl()\n      func = if offset > 0 then 'next' else 'prev'\n      next = selected[func]('.treema-search-result-row')\n      return unless next.length\n      selected.removeClass('treema-search-selected')\n      next.addClass('treema-search-selected')\n  \n    onClick: (e) ->\n      newSelection = $(e.target).closest('.treema-search-result-row')\n      return super(e) unless newSelection.length\n      @getSelectedResultEl().removeClass('treema-search-selected')\n      newSelection.addClass('treema-search-selected')\n      @saveChanges()\n      @display()\n\n    shouldTryToRemoveFromParent: ->\n      return if @data?\n      selected = @getSelectedResultEl()\n      return not selected.length\n  \n  # Source: http://coffeescriptcookbook.com/chapters/functions/debounce\n  \n  debounce = (func, threshold, execAsap) ->\n    timeout = null\n    (args...) ->\n      obj = this\n      delayed = ->\n        func.apply(obj, args) unless execAsap\n        timeout = null\n      if timeout\n        clearTimeout(timeout)\n      else if (execAsap)\n        func.apply(obj, args)\n      timeout = setTimeout delayed, threshold || 100\n  \n  DatabaseSearchTreemaNode.prototype.search = debounce(DatabaseSearchTreemaNode.prototype.search, 200)\n  window.DatabaseSearchTreemaNode = DatabaseSearchTreemaNode\n  \n  \n  TreemaNode.setNodeSubclass 'ace', class AceNode extends TreemaNode\n    valueClass: 'treema-ace'\n  \n    getDefaultValue: -> ''\n  \n    buildValueForDisplay: (valEl) ->\n      @editor?.destroy()\n      pre = $('<pre></pre>')\n      @buildValueForDisplaySimply(pre, \"#{@data}\" or \"-empty-\")\n      valEl.append(pre)\n  \n    buildValueForEditing: (valEl) ->\n      d = $('<div></div>').text(@data)\n      valEl.append(d)\n      @editor = ace.edit(d[0])\n      @editor.setReadOnly(false)\n      @editor.getSession().setMode(@schema.aceMode) if @schema.aceMode?\n      @editor.setTheme(@schema.aceTheme) if @schema.aceTheme?\n      valEl.find('textarea').focus()\n  \n    saveChanges: ->\n      @data = @editor.getValue()\n  \n    onTabPressed: ->\n    onEnterPressed: ->","do ($ = jQuery) ->\n  $.fn[TreemaNode.pluginName] = (options) ->\n    return null if @length is 0\n    element = $(@[0])\n    return TreemaNode.make(element, options)\n"]}