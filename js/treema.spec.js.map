{"version":3,"file":"dev/js/treema.spec.js","sources":["test/common.coffee","test/arrow-keys.coffee","test/delete-key.coffee","test/enter-key.coffee","test/initialization.coffee","test/mouse-click.coffee","test/n-key.coffee","test/tab-key.coffee","test/tv4-interface.coffee"],"names":[],"mappings":"AAAA,IAAA,GAAA;;AAAA,CAAA,CAAgB,CAAN,EAAA,EAAV,EAAW;CACT,IAAA,CAAA;CAAA,CAAA,CAAQ,EAAR,CAAc,GAAN;CAAR,CACA,CAAc,EAAT;CACD,EAAD,EAAH,EAAA,EAAA;CAHQ;ACAV,CAAG,EAAA,MAAA;CACD,KAAA,wIAAA;CAAA,CAAA,CAAiB,MAAC,KAAlB;CAAkC,CAAK,CAAb,IAAA,IAAA;CAA1B,EAAiB;CAAjB,CACA,CAAe,MAAC,GAAhB;CAAgC,CAAK,CAAb,IAAA,IAAA;CADxB,EACe;CADf,CAEA,CAAkB,MAAC,MAAnB;CAAmC,CAAK,CAAb,IAAA,IAAA;CAF3B,EAEkB;CAFlB,CAGA,CAAiB,MAAC,KAAlB;CAAkC,CAAK,CAAb,IAAA,IAAA;CAH1B,EAGiB;CAHjB,CAKA,CAAoB,MAAC,QAArB;CACE,OAAA;CAAA,EAAW,CAAX,EAAiB,EAAjB,UAAW;CAAX,GACA,EAAA,EAAe;CACR,GAAP,EAAA,EAAgB,GAAhB;CARF,EAKoB;CALpB,CAUA,CAAS,GAAT;CAAS,CACD,EAAN,IADO;CAAA,CAEK,EAAZ,MAAA;CAAY,CACJ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;QADE;CAAA,CAED,IAAT,CAAA;CAAS,CAAQ,EAAN,GAAF,CAAE;CAAF,CAAwB,GAAP,GAAA;CAAO,CAAQ,EAAN,GAAM,CAAA,EAAN;SAA1B;QAFC;CAAA,CAGD,IAAT,CAAA;CAAS,CAAQ,EAAN,IAAA;OAHD;KAFL;CAVT,GAAA;CAAA,CAkBA,CAAO,CAAP;CAAO,CAAQ,EAAN,CAAF;CAAA,CAAwB,EAAT,GAAA,OAAS;CAAxB,CAAuE,EAAX,EAA5D,GAA4D;CAlBnE,GAAA;CAAA,CAmBA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAnB5C,GAmBS;CAnBT,CAoBA,GAAA,CAAM;CApBN,CAqBA,CAAa,CArBb,EAqBmB,IAAnB,KAAmC;CArBnC,CAsBA,CAAc,GAAM,CAtBpB,IAsBA,IAAoC;CAtBpC,CAuBA,CAAgB,GAAM,CAvBtB,MAuBA,EAAsC;CAvBtC,CAyBA,CAAW,MAAA,CAAX;CACE,GAAA,EAAM,KAAN;CACY,IAAZ,MAAA;CAFF,EAAW;CAzBX,CA6BA,CAAiC,KAAjC,CAAiC,aAAjC;CACE,CAAA,CAAiD,CAAjD,KAAiD,mCAAjD;CACE,GAAA,EAAA,YAAO;CAAP,EACA,GAAA,QAAA;CACO,KAAP,IAAiB,GAAjB;CAHF,IAAiD;CAAjD,CAKA,CAAoC,CAApC,KAAoC,sBAApC;CACE,GAAA,EAAA,YAAO;CAAP,EACA,GAAA,QAAA;CADA,KAEA,IAAA,OAAA;CAFA,EAGA,GAAA,QAAA;CAHA,KAIA,KAAA,MAAA;CAJA,EAKA,GAAA,QAAA;CACkB,YAAlB,IAAA;CAPF,IAAoC;CALpC,CAcA,CAAiC,CAAjC,KAAiC,mBAAjC;CACE,GAAA,EAAA,YAAO;CAAP,GACA,EAAA,KAAW;CADX,EAEA,GAAA,QAAA;CAFA,KAGA,IAAA,OAAA;CAHA,EAIA,GAAA,QAAA;CAJA,KAKA,KAAA,MAAA;CALA,EAMA,GAAA,QAAA;CANA,KAOA,KAA6B,IAAiB,EAA9C;CAPA,EAQA,GAAA,QAAA;CARA,KASA,KAA6B,IAAiB,EAA9C;CATA,EAUA,GAAA,QAAA;CACkB,YAAlB,IAAA;CAZF,IAAiC;CAc9B,CAAH,CAAkD,MAAA,EAAlD,kCAAA;CACE,GAAA,EAAA,YAAO;CAAP,KACA,OAAa;CADb,KAEA,OAAA,IAAA;CAFA,EAGA,GAAA,QAAA;CACkB,SAAlB,GAAA,IAAA;CALF,IAAkD;CA7BpD,EAAiC;CA7BjC,CAiEA,CAA+B,KAA/B,CAA+B,WAA/B;CACE,CAAA,CAAoD,CAApD,KAAoD,sCAApD;CACE,GAAA,EAAA,YAAO;CAAP,EACA,GAAA,MAAA;CACO,KAAP,IAAO,GAAP;CAHF,IAAoD;CAApD,CAKA,CAAoC,CAApC,KAAoC,sBAApC;CACE,GAAA,EAAA,YAAO;CAAP,EACA,GAAA,MAAA;CADA,KAEA,OAAA,IAAA;CAFA,EAGA,GAAA,MAAA;CAHA,KAIA,KAAA,MAAA;CAJA,EAKA,GAAA,MAAA;CACkB,SAAlB,GAAA,IAAA;CAPF,IAAoC;CALpC,CAcA,CAAiC,CAAjC,KAAiC,mBAAjC;CACE,GAAA,EAAA,YAAO;CAAP,GACA,EAAA,KAAW;CADX,EAEA,GAAA,MAAA;CAFA,KAGA,OAAA,IAAA;CAHA,EAIA,GAAA,MAAA;CAJA,KAKA,KAA6B,IAAiB,EAA9C;CALA,EAMA,GAAA,MAAA;CANA,KAOA,KAA6B,IAAiB,EAA9C;CAPA,EAQA,GAAA,MAAA;CARA,KASA,KAAA,MAAA;CATA,EAUA,GAAA,MAAA;CACkB,SAAlB,GAAA,IAAA;CAZF,IAAiC;CAc9B,CAAH,CAAmD,MAAA,EAAnD,mCAAA;CACE,KAAA,IAAU;CAAV,KACA,IAAA,OAAA;CADA,EAEA,GAAA,MAAA;CACkB,YAAlB,IAAA;CAJF,IAAmD;CA7BrD,EAA+B;CAjE/B,CAoGA,CAAkC,KAAlC,CAAkC,cAAlC;CACE,CAAA,CAA2D,CAA3D,KAA2D,6CAA3D;CACE,KAAA,IAAU;CAAV,KACA,IAAA,OAAA;CADA,EAEA,GAAA,SAAA;CACkB,SAAlB,GAAA,IAAA;CAJF,IAA2D;CAMxD,CAAH,CAAqD,MAAA,EAArD,qCAAA;CACE,KAAA,EAAO,EAAP,CAAkB;CAAlB,KACA,KAAW;CADX,EAEA,GAAA,SAAA;CAFA,KAGA,IAAA,CAAkB;CACA,UAAlB,EAAA,IAAA;CALF,IAAqD;CAPvD,EAAkC;CAczB,CAAwB,CAAA,KAAjC,CAAA,aAAA;CACE,CAAA,CAA0C,CAA1C,KAA0C,4BAA1C;CACE,GAAA,EAAA,KAAW;CAAX,KACA,KAAW;CADX,EAEA,GAAA,QAAA;CAFA,KAGA,EAAO,EAAP,CAAkB;CACA,UAAlB,EAAA,IAAA;CALF,IAA0C;CAA1C,CAOA,CAAyF,CAAzF,KAAyF,2EAAzF;CACE,GAAA,EAAA,KAAW;CAAX,KACA,KAAW,IAAiB;CAD5B,EAEA,GAAA,QAAA;CAFA,KAGA,IAAA,CAAkB;CAHlB,KAIA,KAAA,MAAA;CAJA,EAKA,GAAA,QAAA;CALA,KAMA,EAAO,EAAP,CAAkB;CACA,UAAlB,EAAA,IAAA;CARF,IAAyF;CAUtF,CAAH,CAAsD,MAAA,EAAtD,sCAAA;CACE,GAAA,EAAA,KAAW;CAAX,GACA,EAAA,KAAW,IAAiB;CAD5B,KAEA,KAAW,IAAiB;CAF5B,EAIA,GAAA,QAAA;CAJA,KAKA,IAAA,CAAkB,IAAiB;CALnC,KAMA,IAAA,CAAkB;CANlB,KAOA,KAA6B,IAAiB,EAA9C;CAPA,EASA,GAAA,QAAA;CATA,KAUA,EAAO,EAAP,CAAkB,IAAiB;CAVnC,KAWA,IAAA,CAAkB;CAXlB,KAYA,KAA6B,IAAiB,EAA9C;CAZA,EAcA,GAAA,QAAA;CAdA,KAeA,IAAA,CAAkB;CAflB,KAgBA,KAAA,MAAA;CAhBA,EAkBA,GAAA,QAAA;CAlBA,KAmBA,EAAO,EAAP,CAAkB;CACA,UAAlB,EAAA,IAAA;CArBF,IAAsD;CAlBxD,EAAiC;CAnHhC;ACAH,CAAS,CAAoB,CAAA,KAA7B,CAA6B,SAA7B;CACE,KAAA,2GAAA;CAAA,CAAA,CAAiB,MAAC,KAAlB;CAAkC,CAAK,CAAb,IAAA,IAAA;CAA1B,EAAiB;CAAjB,CAEA,CAAS,GAAT;CAAS,CACD,EAAN,IADO;CAAA,CAEK,EAAZ,MAAA;CAAY,CACJ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;QADE;CAAA,CAED,IAAT,CAAA;CAAS,CAAQ,EAAN,GAAF,CAAE;CAAF,CAAwB,GAAP,GAAA;CAAO,CAAQ,EAAN,GAAM,CAAA,EAAN;SAA1B;QAFC;CAAA,CAGD,IAAT,CAAA;CAAS,CAAQ,EAAN,IAAA;OAHD;KAFL;CAFT,GAAA;CAAA,CAUA,CAAgB,UAAhB;CAAgB,CAAQ,EAAN,CAAF;CAAA,CAAwB,EAAT,GAAA,OAAS;CAAxB,CAAuE,EAAX,EAA5D,GAA4D;CAV5E,GAAA;CAAA,CAWA,CAAS,CAXT,EAWA,IAAS,CAA6B,EAAhB;CAXtB,CAaA,CAAU,IAAV,EAAU;CACR,GAAA,IAAA;CAAA,CAAsB,CAAf,CAAP,EAAO,OAAA;CAAP,CAC+B,CAAtB,CAAT,EAAA,IAAmB;CAAY,CAAO,EAAN,EAAA;CAAD,CAAqB,IAAR;CAD5C,KACS;CADT,GAEA,CAAA,CAAM;CAFN,EAGa,CAAb,EAAmB,IAAnB,KAAmC;CAHnC,EAIgB,CAAhB,EAAsB,CAJtB,MAIA,EAAsC;CACjB,EAAP,GAAM,KAApB,IAAoC;CAnBtC,EAaU;CAbV,CAqBA,CAAoB,MAAC,QAArB;CACE,OAAA;CAAA,EAAW,CAAX,EAAiB,EAAjB,UAAW;CAAX,GACA,EAAA,EAAe;CACR,GAAP,EAAA,EAAgB,GAAhB;CAxBF,EAqBoB;CArBpB,CA0BA,CAAW,MAAA,CAAX;CACE,MAAA,IAAA;CADF,EAAW;CA1BX,CA6BA,CAA4C,MAAA,8BAA5C;CACE,EAAA,CAAA,EAAqB,QAArB;CAAA,GACA,EAAA,OAA2C;CACpC,GAAW,EAAlB,CAAA,IAAA,EAA8C;CAHhD,EAA4C;CA7B5C,CAkCA,CAA6B,MAAA,eAA7B;CACE,GAAA,EAAA,IAAU;CAAV,EACA,CAAA,EAAqB,QAArB;CADA,GAEA,EAAA,OAAA;CAFA,GAGA,EAAA,OAAA,EAA6B;CACtB,KAAP,CAAA,GAAA,CAAA,IAA6B;CAL/B,EAA6B;CAlC7B,CAyCA,CAAgC,MAAA,kBAAhC;CACE,GAAA,EAAA,IAAU;CAAV,GACA,QAAA,CAAa;CADb,EAEA,CAAA,EAAqB,QAArB;CAFA,GAGA,EAAA,OAAA;CAHA,GAIA,EAAA,CAAA,MAAA;CAJA,GAKA,EAAA,OAAA,EAA6B;CACtB,KAAP,CAAA,IAAA,EAAA,EAA6B;CAP/B,EAAgC;CAzChC,CAkDA,CAAwF,MAAA,0EAAxF;CACE,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,GAEA,EAAA,KAAW,IAAiB;CAF5B,GAGA,EAAA,CAA0B;CAH1B,EAOA,CAAA,EAAqB,QAArB;CAPA,GAQA,EAAA,CAA0B;CAR1B,GASA,OAA6B,IAAiB,EAA9C;CATA,EAaA,CAAA,EAAqB,QAArB;CAbA,GAcA,EAAA,CAA0B;CAd1B,GAeA,OAAA,MAAA;CAfA,EAmBA,CAAA,EAAqB,QAArB;CAnBA,GAoBA,EAAA,CAAA,MAAA;CApBA,GAqBA,SAAA,IAAA;CArBA,EAyBA,CAAA,EAAqB,QAArB;CAzBA,GA0BA,EAAA,CAAA,MAAA;CA1BA,GA2BA,MAAA,OAAA;CA3BA,EA+BA,CAAA,EAAqB,QAArB;CA/BA,GAgCA,EAAA,OAAA;CAhCA,GAiCA,EAAA,YAAO;CACA,GAAA,EAAP,KAAA;CAnCF,EAAwF;CAlDxF,CAuFA,CAAoF,MAAA,sEAApF;CACE,GAAA,MAAU;CAAV,CACA,CAAc,CAAd,GAAA,GAAU;CADV,EAE6B,CAA7B,GAAe,GAAU,IAAzB;CAFA,GAGA,EAAA,OAAA;CACkB,UAAlB,MAAA;CALF,EAAoF;CAOjF,CAAH,CAAqD,MAArD,uCAAA;CACE,GAAA,MAAU;CAAV,EAC6B,CAA7B,GAAe,GAAU,IAAzB;CACO,GAAW,EAAlB,IAAA,CAAA;CAHF,EAAqD;CA/F1B;ACA7B,CAAS,CAAmB,CAAA,KAA5B,CAA4B,QAA5B;CACE,KAAA,sDAAA;CAAA,CAAA,CAAgB,MAAC,IAAjB;CAAiC,CAAK,CAAb,IAAA,IAAA;CAAzB,EAAgB;CAAhB,CAEA,CAAS,GAAT;CAAS,CACD,EAAN,IADO;CAAA,CAEK,EAAZ,MAAA;CAAY,CACJ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;QADE;CAAA,CAED,IAAT,CAAA;CAAS,CAAQ,EAAN,GAAF,CAAE;CAAF,CAAwB,GAAP,GAAA;CAAO,CAAQ,EAAN,IAAF,EAAE;CAAF,CAA6B,OAAX,CAAA;SAA1C;QAFC;CAAA,CAGD,IAAT,CAAA;CAAS,CAAQ,EAAN,IAAA;OAHD;KAFL;CAFT,GAAA;CAAA,CAUA,CAAO,CAAP;CAAO,CAAQ,EAAN,CAAF;CAAA,CAAwB,EAAT,GAAA,OAAS;CAAxB,CAAqE,EAAX,EAA1D,GAA0D;CAVjE,GAAA;CAAA,CAWA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAX5C,GAWS;CAXT,CAYA,GAAA,CAAM;CAZN,CAaA,CAAa,CAbb,EAamB,IAAnB,KAAmC;CAbnC,CAcA,CAAc,GAAM,CAdpB,IAcA,IAAoC;CAdpC,CAgBA,CAAU,MAAV;CACE,GAAA,EAAM,UAAN;CACY,IAAZ,MAAA;CAFF,EAAU;CAhBV,CAoBA,CAAkC,MAAA,oBAAlC;CACE,GAAA,EAAA,IAAU;CAAV,EACA,CAAA,EAAoB,OAApB;CACO,KAAP,GAAO,CAAU,CAAjB;CAHF,EAAkC;CApBlC,CAyBA,CAA4F,MAAA,8EAA5F;CACE,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAEkC,CAAlC,EAAA,CAAA,IAAW,IAAiB;CAF5B,EAGA,CAAA,OAAyB,EAAzB,EAA0C;CAH1C,GAIA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAJnC,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CAC5B,GAAW,EAAlB,CAA2B,IAA3B;CAPF,EAA4F;CAzB5F,CAkCA,CAAiD,MAAA,mCAAjD;CACE,GAAA,OAAW;CAAX,GACA,MAAU;CADV,EAEA,CAAA,MAAwB,GAAxB;CAFA,GAGA,EAAA,IAAO,CAAW;CAHlB,EAIA,CAAA,EAAoB,OAApB;CAJA,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CALnC,EAMA,CAAA,OAAyB,EAAzB,EAA0C;CACnC,KAAP,GAAO,CAAP,CAAA,IAAmC;CARrC,EAAiD;CAlCjD,CA4CA,CAA+B,MAAA,iBAA/B;CACE,GAAA,EAAA,KAAW;CAAX,EACA,CAAA,EAAoB,OAApB;CACO,KAAP,IAAA,CAAA;CAHF,EAA+B;CA5C/B,CAiDA,CAA2D,MAAA,6CAA3D;CACE,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAEkC,CAAlC,GAAA,IAAW,IAAiB;CAF5B,EAGA,CAAA,OAAyB,EAAzB,EAA0C;CAH1C,GAIA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAJnC,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CALnC,EAMA,CAAA,EAAA,CAA2B;CACpB,KAAP,CAAO,EAAP,EAAA;CARF,EAA2D;CAjD3D,CA2DA,CAAyC,MAAA,2BAAzC;CACE,IAAA,GAAA;CAAA,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAGQ,CAAR,CAAA,CAAc,GAAN;CAHR,CAAA,CAIc,CAAd,CAAK;CAJL,EAKiB,CAAjB,CAAK,GAAL;CALA,EAMkC,CAAlC,CAAA,EAAA,IAAW,IAAiB;CAN5B,GAQA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAC5B,KAAP,GAAO,CAAP,CAAA,IAAmC;CAVrC,EAAyC;CAYtC,CAAH,CAAwE,MAAxE,0DAAA;CACE,GAAA,OAAW;CAAX,GACA,EAAA,KAAW;CADX,EAEA,CAAA,OAAyB,EAAzB;CACO,KAAP,GAAO,CAAP,CAAA,IAAmC;CAJrC,EAAwE;CAxE9C;ACA5B,CAAS,CAAkB,CAAA,KAA3B,CAA2B,OAA3B;CAEE,KAAA,kBAAA;CAAA,CAAA,CAAS,GAAT;CAAS,CAAQ,EAAN,IAAF;CAAA,CAA8B,EAAZ,MAAA;CAAY,CAAQ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;CAAF,CAA6B,MAAX,CAAA,CAAlB;OAAR;KAA9B;CAAT,GAAA;CAAA,CACA,CAAO,CAAP;CADA,CAEA,CAAK,UAAA;CAFL,CAIA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAJ5C,GAIS;CAJT,CAMA,CAAsC,MAAA,wBAAtC;CACS,EAAP,GAAA,KAAA;CADF,EAAsC;CANtC,CASA,CAAoC,MAAA,sBAApC;CACE,OAAA;CAAA,CAAW,CAAA,CAAX,IAAA,EAAqB;CAAU,CAAO,EAAN,EAAA;CAAD,CAAqB,IAAR;CAA5C,KAAW;CACJ,CAAP,CAAA,CAAA,EAAA,EAAe,GAAf;CAFF,EAAoC;CATpC,CAaA,CAA+C,MAAA,iCAA/C;CACE,OAAA,IAAA;CAAA,CAAqC,CAAtB,CAAf,MAAyB,EAAzB;CAAqC,CAAS,IAAR;CAAtC,KAAe;CACR,GAAiB,EAAxB,IAAA,CAAA,CAAmB;CAFrB,EAA+C;CAI5C,CAAH,CAAgD,MAAhD,kCAAA;CACE,GAAA,CAAA,CAAM;CACC,KAAP,IAAA,CAAA;CAFF,EAAgD;CAnBvB;ACA3B,CAAS,CAAwB,CAAA,KAAjC,CAAiC,aAAjC;CAEE,KAAA,8DAAA;CAAA,CAAA,CAAS,GAAT;CAAS,CACD,EAAN,IADO;CAAA,CAEK,EAAZ,MAAA;CAAY,CACJ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;QADE;CAAA,CAED,IAAT,CAAA;CAAS,CAAQ,EAAN,GAAF,CAAE;CAAF,CAAwB,GAAP,GAAA;CAAO,CAAQ,EAAN,IAAF,EAAE;SAA1B;OAFC;KAFL;CAAT,GAAA;CAAA,CAOA,CAAO,CAAP;CAAO,CAAQ,EAAN,CAAF;CAAA,CAAwB,EAAT,GAAA,OAAS;CAP/B,GAAA;CAAA,CAQA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAR5C,GAQS;CART,CASA,GAAA,CAAM;CATN,CAUA,CAAa,CAVb,EAUmB,IAAnB,KAAmC;CAVnC,CAWA,CAAc,GAAM,CAXpB,IAWA,IAAoC;CAXpC,CAaA,CAAa,MAAC,CAAd;CACE,IAAA,GAAA;CAAA,EAAQ,CAAR,CAAA,CAAc,CAAN;CAAR,EACiB,CAAjB,CAAK,GAAL;CACI,EAAD,EAAH,EAAA,IAAA;CAhBF,EAaa;CAbb,CAkBA,CAAY,MAAZ;CACE,IAAA,GAAA;CAAA,EAAQ,CAAR,CAAA,CAAc,CAAN;CAAR,EACgB,CAAhB,CAAK,EAAL;CACI,EAAD,EAAH,EAAA,IAAA;CArBF,EAkBY;CAlBZ,CAuBA,CAA4C,MAAA,8BAA5C;CACE,GAAA,EAAA,IAAiB,EAAV;CAAP,EACc,CAAd,CAAA,KAAU,KAAV;CADA,GAEA,EAAA,GAAO,CAAU;CACN,MAAX,GAAU,CAAV;CAJF,EAA4C;CAvB5C,CA6BA,CAAgD,MAAA,kCAAhD;CACE,GAAA,EAAA,EAAO,EAAP,CAAkB;CAAlB,EACe,CAAf,CAAA,MAAW,IAAX;CADA,GAEA,EAAA,IAAA,CAAkB;CACN,IAAZ,MAAA;CAJF,EAAgD;CA7BhD,CAmCA,CAAgF,MAAA,kEAAhF;CACE,GAAA,EAAA,GAAA,CAAiB;CAAjB,EACc,CAAd,CAAA,KAAU;CADV,GAEA,EAAA,IAAiB;CAFjB,EAGc,CAAd,CAAA,KAAU;CACH,KAAP,GAAA,CAAiB,CAAjB;CALF,EAAgF;CAnChF,CA0CA,CAAqD,MAAA,uCAArD;CACE,GAAA,OAAW;CAAX,EACc,CAAd,CAAA,KAAU;CADV,EAEA,CAAA,MAAA,CAAsB,IAAiB;CAFvC,GAGA,EAAA,IAAiB;CAHjB,GAIA,EAAA,IAAO,CAAW;CAJlB,GAKA,EAAA,IAAO,CAAW,IAAiB;CALnC,GAMA,EAAA,IAAO,CAAW,IAAiB;CANnC,GAOA,EAAM,KAAN;CACY,IAAZ,MAAA;CATF,EAAqD;CA1CrD,CAqDA,CAAoF,MAAA,sEAApF;CACE,EAAc,CAAd,CAAA,KAAU;CAAV,EACA,CAAA,MAAA,CAAsB;CADtB,GAEA,EAAA,IAAiB;CAFjB,GAGA,EAAA,IAAO,CAAW;CAHlB,EAIc,CAAd,CAAA,KAAU;CAJV,GAKA,EAAA,IAAiB;CALjB,GAMA,EAAA,GAAA,CAAO,CAAW;CACX,KAAD,KAAN;CARF,EAAoF;CAUjF,CAAH,CAAsD,MAAtD,wCAAA;CACE,EAAc,CAAd,CAAA,KAAU;CAAV,EACA,CAAA,KAAA,EAAqB;CADrB,GAEA,EAAA,IAAiB;CAFjB,GAGA,EAAA,IAAO,CAAW;CAHlB,EAIA,CAAA,KAAA,CAAoB;CAJpB,GAKA,EAAA,GAAA,CAAiB;CALjB,GAMA,EAAA,IAAO,CAAW;CACX,KAAD,KAAN;CARF,EAAsD;CAjEvB;ACAjC,CAAS,CAAiB,CAAA,KAA1B,CAA0B,MAA1B;CACE,KAAA,yBAAA;CAAA,CAAA,CAAY,MAAZ;CAA6B,CAAK,CAAb,IAAA,IAAA;CAArB,EAAY;CAAZ,CAEA,CAAS,GAAT;CAAS,CACD,EAAN,GADO;CAAA,CAEG,EAAV,IAAA;CAFO,CAGA,EAAP,CAAA;CAAO,CAAQ,EAAN,EAAA,EAAF;KAHA;CAFT,GAAA;CAAA,CAOA,CAAO,CAAP,UAAO;CAPP,CAQA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAR5C,GAQS;CART,CASA,GAAA,CAAM;CATN,CAWA,CAA8D,MAAA,gDAA9D;CACE,GAAA,EAAM,SAAiB;CAAvB,GACA,EAAA,OAAA,EAA8B;CAD9B,EAEA,CAAA,EAAgB,GAAhB,MAAiC;CAFjC,EAGqC,CAArC,EAAA,OAAA,EAA8B;CAH9B,EAI6B,CAA7B,EAAM,CAAN,OAAA,CAAuB;CAJvB,GAKA,EAAM,CAAN,QAAuB;CAChB,KAAD,KAAN,IAAuB;CAPzB,EAA8D;CAS3D,CAAH,CAA4D,MAA5D,8CAAA;CACE,GAAA,EAAA;CAAA,EACA,CAAA,EAAgB,GAAhB,MAAiC;CAC1B,GAAW,EAAlB,KAAA;CAHF,EAA4D;CArBpC;ACE1B,CAAS,CAAiB,CAAA,KAA1B,CAA0B,MAA1B;CACE,KAAA,mEAAA;CAAA,CAAA,CAAc,MAAC,EAAf;CAA+B,CAAK,CAAb,IAAA,IAAA;CAAvB,EAAc;CAAd,CAEA,CAAS,GAAT;CAAS,CACD,EAAN,IADO;CAAA,CAEK,EAAZ,MAAA;CAAY,CACJ,EAAN,EAAA;CAAM,CAAQ,EAAN,IAAA;QADE;CAAA,CAED,IAAT,CAAA;CAAS,CAAQ,EAAN,GAAF,CAAE;CAAF,CAAwB,GAAP,GAAA;CAAO,CAAQ,EAAN,IAAF,EAAE;CAAF,CAA6B,OAAX,CAAA;SAA1C;QAFC;CAAA,CAGD,IAAT,CAAA;CAAS,CAAQ,EAAN,IAAA;OAHD;KAFL;CAFT,GAAA;CAAA,CAUA,CAAO,CAAP;CAAO,CAAQ,EAAN,CAAF;CAAA,CAAwB,EAAT,GAAA,OAAS;CAAxB,CAAqE,EAAX,EAA1D,GAA0D;CAVjE,GAAA;CAAA,CAWA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAX5C,GAWS;CAXT,CAYA,GAAA,CAAM;CAZN,CAaA,CAAa,CAbb,EAamB,IAAnB,KAAmC;CAbnC,CAcA,CAAc,GAAM,CAdpB,IAcA,IAAoC;CAdpC,CAeA,CAAgB,GAAM,CAftB,MAeA,EAAsC;CAftC,CAiBA,CAAU,MAAV;CACE,GAAA,EAAM,UAAN;CACY,IAAZ,MAAA;CAFF,EAAU;CAjBV,CAqBA,CAAkC,MAAA,oBAAlC;CACE,GAAA,EAAA,IAAU;CAAV,EACA,CAAA,EAAkB,KAAlB;CACO,KAAP,GAAO,CAAU,CAAjB;CAHF,EAAkC;CArBlC,CA0BA,CAA4F,MAAA,8EAA5F;CACE,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAEkC,CAAlC,EAAA,CAAA,IAAW,IAAiB;CAF5B,EAGA,CAAA,OAAA,IAAwC;CAHxC,GAIA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAJnC,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CAC5B,GAAW,EAAlB,CAA2B,IAA3B;CAPF,EAA4F;CA1B5F,CAmCA,CAAiD,MAAA,mCAAjD;CACE,GAAA,OAAW;CAAX,GACA,MAAU;CADV,EAEA,CAAA,MAAsB,CAAtB;CAFA,GAGA,EAAA,IAAO,CAAW;CAHlB,EAIA,CAAA,EAAkB,KAAlB;CAJA,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CALnC,EAMA,CAAA,OAAA,IAAwC;CACjC,KAAP,GAAO,CAAP,CAAA,IAAmC;CARrC,EAAiD;CAnCjD,CA6CA,CAAoC,MAAA,sBAApC;CACE,GAAA,MAAU;CAAV,EACA,CAAA,MAAsB,CAAtB;CADA,GAEA,EAAA,IAAO,CAAW;CAFlB,EAGA,CAAA,EAAkB,KAAlB;CACO,KAAP,GAAO,CAAP,CAAA,EAAoB;CALtB,EAAoC;CA7CpC,CAoDA,CAA4D,MAAA,8CAA5D;CACE,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAEkC,CAAlC,GAAA,IAAW,IAAiB;CAF5B,EAGA,CAAA,OAAA,IAAwC;CAHxC,GAIA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAJnC,GAKA,EAAA,GAAO,CAAP,CAAkB,IAAiB;CALnC,EAMA,CAAA,EAAA,CAA2B;CACpB,KAAP,CAAO,EAAP,EAAA;CARF,EAA4D;CApD5D,CA8DA,CAAyC,MAAA,2BAAzC;CACE,IAAA,GAAA;CAAA,GAAA,OAAW;CAAX,GACA,OAAW,IAAiB;CAD5B,EAGQ,CAAR,CAAA,CAAc,GAAN;CAHR,EAIc,CAAd,CAAK;CAJL,EAKiB,CAAjB,CAAK,GAAL;CALA,EAMkC,CAAlC,CAAA,EAAA,IAAW,IAAiB;CAN5B,GAQA,EAAA,IAAA,CAAkB,CAAX,GAA4B;CAC5B,KAAP,GAAO,CAAP,CAAA,IAAmC;CAVrC,EAAyC;CAYtC,CAAH,CAAwE,MAAxE,0DAAA;CACE,GAAA,OAAW;CAAX,GACA,EAAA,KAAW;CADX,EAEA,CAAA,OAAA;CACO,KAAP,GAAO,CAAP,CAAA,IAAmC;CAJrC,EAAwE;CA3EhD;ACF1B,CAAS,CAAiB,CAAA,KAA1B,CAA0B,MAA1B;CAEE,KAAA,cAAA;CAAA,CAAA,CAAS,GAAT;CAAS,CAAQ,EAAN,IAAF;CAAT,GAAA;CAAA,CACA,CAAO,CAAP,CADA;CAAA,CAEA,CAAS,CAAA,EAAT,IAAmB;CAAY,CAAO,EAAN;CAAD,CAAqB,EAAR,EAAA;CAF5C,GAES;CAFT,CAIA,CAA8B,MAAA,gBAA9B;CACS,GAAP,CAAA,CAAA,CAAO,IAAP;CADF,EAA8B;CAG3B,CAAH,CAAqB,MAArB,OAAA;CACS,GAAP,EAAA,GAAO,EAAP;CADF,EAAqB;CATG","sourcesContent":["keyDown = ($el, which) ->\n  event = jQuery.Event(\"keydown\")\n  event.which = which\n  $el.trigger(event)\n","do ->\n  leftArrowPress = ($el) -> keyDown($el, 37)\n  upArrowPress = ($el) -> keyDown($el, 38)\n  rightArrowPress = ($el) -> keyDown($el, 39)\n  downArrowPress = ($el) -> keyDown($el, 40)\n  \n  expectOneSelected = (t) ->\n    selected = treema.getSelectedTreemas()\n    expect(selected.length).toBe(1)\n    expect(selected[0]).toBe(t)\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: ['string', 'array'] } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', ['123-456-7890']], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  addressTreema = treema.childrenTreemas.address\n  \n  beforeEach ->\n    treema.deselectAll()\n    phoneTreema.close()\n    \n  describe 'Down arrow key press', ->\n    it 'selects the top row if nothing is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      downArrowPress(treema.$el)\n      expect(nameTreema.isSelected()).toBeTruthy()\n      \n    it 'skips past closed collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      \n    it 'traverses open collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      phoneTreema.open()\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[0])\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n      downArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      \n    it 'does nothing if the last treema is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      addressTreema.select()\n      expectOneSelected(addressTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n  describe 'Up arrow key press', ->\n    it 'selects the bottom row if nothing is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      upArrowPress(treema.$el)\n      expect(addressTreema.isSelected()).toBeTruthy()\n\n    it 'skips past closed collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n    it 'traverses open collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      phoneTreema.open()\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[0])\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n    it 'wraps around if the first treema is selected', ->\n      nameTreema.select()\n      expectOneSelected(nameTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n\n  describe 'Right arrow key press', ->\n    it 'does nothing if the selected row isn\\'t a collection', ->\n      nameTreema.select()\n      expectOneSelected(nameTreema)\n      rightArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      \n    it 'opens a collection if a collection is selected', ->\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      phoneTreema.select()\n      rightArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      \n  describe 'Left arrow key press', ->\n    it 'closes an open, selected collection', ->\n      phoneTreema.open()\n      phoneTreema.select()\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n    \n    it 'closes the selection if it can be closed, otherwise moves the selection up a level', ->\n      phoneTreema.open()\n      phoneTreema.childrenTreemas[0].select()\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      \n    it 'affects one collection at a time, deepest first', ->\n      phoneTreema.open()\n      phoneTreema.childrenTreemas[1].open()\n      phoneTreema.childrenTreemas[1].childrenTreemas[0].select()\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.childrenTreemas[1].isOpen()).toBeTruthy()\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.childrenTreemas[1].isClosed()).toBeTruthy()\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)","describe 'Delete key press', ->\n  deleteKeyPress = ($el) -> keyDown($el, 8)\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: ['string', 'array'] } }\n      address: { type: 'string' }\n    }\n  }\n  original_data = { name: 'Bob', numbers: ['401-401-1337', ['123-456-7890']], 'address': 'Mars' }\n  treema = nameTreema = addressTreema = phoneTreema = null\n  \n  rebuild = ->\n    copy = $.extend(true, {}, original_data)\n    treema = TreemaNode.make(null, {data: copy, schema: schema})\n    treema.build()\n    nameTreema = treema.childrenTreemas.name\n    addressTreema = treema.childrenTreemas.address\n    phoneTreema = treema.childrenTreemas.numbers\n\n  expectOneSelected = (t) ->\n    selected = treema.getSelectedTreemas()\n    expect(selected.length).toBe(1)\n    expect(selected[0]).toBe(t)\n\n  beforeEach ->\n    rebuild()\n  \n  it 'does nothing when nothing is selected', ->\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBe(original_data.name)\n    expect(treema.data.address).toBe(original_data.address)\n  \n  it 'removes a selected row', ->\n    nameTreema.select()\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBeUndefined()\n    expect(treema.childrenTreemas.name).toBeUndefined()\n    expect(treema.childrenTreemas.address).toBeTruthy()\n  \n  it 'removes all selected rows', ->\n    nameTreema.select()\n    addressTreema.toggleSelect()\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBeUndefined()\n    expect(treema.data.address).toBeUndefined()\n    expect(treema.childrenTreemas.name).toBeUndefined()\n    expect(treema.childrenTreemas.address).toBeUndefined()\n\n  it 'removes single elements of a collection one at a time, then the collection itself', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].open()\n    phoneTreema.childrenTreemas[0].select()\n    expect(treema.data.numbers.length).toBe(2)\n\n    # deletes '401...', selects ['123...'] (which is now at index 0)\n    # stays at the same level, does not enter the open collection\n    deleteKeyPress(treema.$el)\n    expect(treema.data.numbers.length).toBe(1)\n    expectOneSelected(phoneTreema.childrenTreemas[0])\n\n    # deletes ['123...'], selects numbers\n    # when there are no more elements, goes to the parent\n    deleteKeyPress(treema.$el)\n    expect(treema.data.numbers.length).toBe(0)\n    expectOneSelected(phoneTreema)\n\n    # deletes numbers, selects address\n    # when there's an element the one just deleted, it goes down\n    deleteKeyPress(treema.$el) \n    expect(treema.data.numbers).toBeUndefined()\n    expectOneSelected(addressTreema)\n\n    # deletes address, selects name\n    # when there's no element after the one just deleted, it goes up\n    deleteKeyPress(treema.$el) \n    expect(treema.data.address).toBeUndefined()\n    expectOneSelected(nameTreema)\n\n    # deletes name, nothing more to select\n    # when there are no more elements, select nothing\n    deleteKeyPress(treema.$el) \n    expect(treema.data.name).toBeUndefined()\n    expect(treema.getSelectedTreemas().length).toBe(0)\n    expect(Object.keys(treema.data).length).toBe(0)\n    \n  it 'removes a row if it\\'s being edited and there\\'s nothing in the focused input', ->\n    nameTreema.edit()\n    nameTreema.$el.find('input').val('')\n    deleteKeyPress(nameTreema.$el.find('input'))\n    expect(treema.data.name).toBeUndefined()\n    expectOneSelected(phoneTreema)\n\n  it 'performs normally if a focused input has value', ->\n    nameTreema.edit()\n    deleteKeyPress(nameTreema.$el.find('input'))\n    expect(treema.data.name).toBeTruthy()\n","describe 'Enter key press', ->\n  enterKeyPress = ($el) -> keyDown($el, 13)\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string', minLength: 4 } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  \n  afterEach ->\n    treema.endExistingEdits()\n    phoneTreema.close()\n  \n  it 'edits the last selected row', ->\n    nameTreema.select()\n    enterKeyPress(treema.$el)\n    expect(nameTreema.isEditing()).toBeTruthy()\n    \n  it 'saves the current row and goes on to the next value in the collection if there is one', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('4321')\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('4321')\n    \n  it 'traverses into and out of open collections', ->\n    phoneTreema.open()\n    nameTreema.edit()\n    enterKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    enterKeyPress(treema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    \n  it 'opens closed collections', ->\n    phoneTreema.select()\n    enterKeyPress(treema.$el)\n    expect(phoneTreema.isOpen()).toBeTruthy()\n    \n  it 'shows errors and moves on when saving an invalid row', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('1')\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('1')\n    expect(treema.isValid()).toBeFalsy()\n\n  it 'goes backwards if shift is pressed', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].edit()\n\n    event = jQuery.Event(\"keydown\")\n    event.which = 13\n    event.shiftKey = true\n    phoneTreema.childrenTreemas[1].$el.trigger(event)\n\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n  \n  it 'edits the first child in a collection if a collection is selected', ->\n    phoneTreema.open()\n    phoneTreema.select()\n    enterKeyPress(phoneTreema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n","describe 'Initialization', ->\n\n  schema = { type: 'object', properties: { name: { type: 'string', 'default': 'Untitled'} } }\n  data = { }\n  el = $('<div></div>')\n\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  \n  it 'creates an $el if none is given', ->\n    expect(treema.$el).toBeDefined()\n    \n  it 'uses the jQuery element given', ->\n    elTreema = TreemaNode.make(el, {data: data, schema: schema})\n    expect(elTreema.$el).toBe(el)\n    \n  it 'grabs default data from an object schema', ->\n    noDataTreema = TreemaNode.make(null, {schema: schema})\n    expect(noDataTreema.data.name).toBe('Untitled')\n    \n  it 'opens up root collection nodes by default', ->\n    treema.build()\n    expect(treema.isOpen()).toBeTruthy()\n   ","describe 'Mouse click behavior', ->\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string' } }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'] }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  \n  shiftClick = ($el) ->\n    event = jQuery.Event(\"click\")\n    event.shiftKey = true\n    $el.trigger(event)\n    \n  metaClick = ($el) ->\n    event = jQuery.Event(\"click\")\n    event.metaKey = true\n    $el.trigger(event)\n    \n  it 'starts editing if you click the value', ->\n    expect(nameTreema.isDisplaying()).toBeTruthy()\n    nameTreema.$el.find('.treema-value').click()\n    expect(nameTreema.isEditing()).toBeTruthy()\n    nameTreema.display()\n    \n  it 'opens a collection if you click the value', ->\n    expect(phoneTreema.isClosed()).toBeTruthy()\n    phoneTreema.$el.find('.treema-value').click()\n    expect(phoneTreema.isOpen()).toBeTruthy()\n    phoneTreema.close()\n    \n  it 'selects and unselects the row if you click something other than the value', ->\n    expect(nameTreema.isSelected()).toBeFalsy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeTruthy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeFalsy()\n\n  it 'selects along all open rows if you shift click', ->\n    phoneTreema.open()\n    nameTreema.$el.click()\n    shiftClick(phoneTreema.childrenTreemas[1].$el)\n    expect(nameTreema.isSelected())\n    expect(phoneTreema.isSelected())\n    expect(phoneTreema.childrenTreemas[0].isSelected())\n    expect(phoneTreema.childrenTreemas[1].isSelected())\n    treema.deselectAll()\n    phoneTreema.close()\n    \n  it 'keeps the clicked row selected if there are multiple selections to begin with', ->\n    nameTreema.$el.click()\n    shiftClick(phoneTreema.$el)\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeFalsy()\n    treema.deselectAll()\n    \n  it 'toggles the select state if you ctrl/meta click', ->\n    nameTreema.$el.click()\n    metaClick(phoneTreema.$el)\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    metaClick(nameTreema.$el)\n    expect(nameTreema.isSelected()).toBeFalsy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    treema.deselectAll()\n","describe '\"N\" key press', ->\n  nKeyPress = ($el) -> keyDown($el, 78)\n\n  schema = {\n    type: 'array',\n    maxItems: 3,\n    items: { type: 'string' }\n  }\n  data = ['401-401-1337', '123-456-7890']\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n\n  it 'creates a new row for the currently selected collection', ->\n    treema.childrenTreemas[0].select()\n    expect(treema.childrenTreemas[2]).toBeUndefined()\n    nKeyPress(treema.childrenTreemas[0].$el)\n    expect(treema.childrenTreemas[2]).not.toBeUndefined()\n    treema.childrenTreemas[2].$el.find('input').val('410-555-1023')\n    treema.childrenTreemas[2].display()\n    treema.childrenTreemas[2].select()\n    \n  it 'does not create a new row when there\\'s no more space', ->\n    expect(treema.data.length).toBe(3)\n    nKeyPress(treema.childrenTreemas[0].$el)\n    expect(treema.data.length).toBe(3)","# almost exactly the same as enter, except it keeps focus on a row that is invalid\n\ndescribe 'Tab key press', ->\n  tabKeyPress = ($el) -> keyDown($el, 9)\n  \n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string', minLength: 4 } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  addressTreema = treema.childrenTreemas.address\n  \n  afterEach ->\n    treema.endExistingEdits()\n    phoneTreema.close()\n  \n  it 'edits the last selected row', ->\n    nameTreema.select()\n    tabKeyPress(treema.$el)\n    expect(nameTreema.isEditing()).toBeTruthy()\n\n  it 'saves the current row and goes on to the next value in the collection if there is one', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('4321')\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('4321')\n\n  it 'traverses into and out of open collections', ->\n    phoneTreema.open()\n    nameTreema.edit()\n    tabKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    tabKeyPress(treema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n\n  it 'skips over closed collections', ->\n    nameTreema.edit()\n    tabKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    tabKeyPress(treema.$el)\n    expect(addressTreema.isEditing()).toBeTruthy()\n\n  it 'shows errors and stays put when saving an invalid row', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('1')\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('1')\n    expect(treema.isValid()).toBeFalsy()\n\n  it 'goes backwards if shift is pressed', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].edit()\n\n    event = jQuery.Event(\"keydown\")\n    event.which = 9\n    event.shiftKey = true\n    phoneTreema.childrenTreemas[1].$el.trigger(event)\n\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n\n  it 'edits the first child in a collection if a collection is selected', ->\n    phoneTreema.open()\n    phoneTreema.select()\n    tabKeyPress(phoneTreema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n","describe 'TV4 Interface', ->\n  \n  schema = { type: 'number' }\n  data = 'NaN'\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n\n  it 'can check data validity', ->\n    expect(treema.isValid()).toBe false\n    \n  it 'returns errors', ->\n    expect(treema.getErrors().length).toBe 1"]}