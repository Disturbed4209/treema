{"version":3,"file":"dev/js/treema.spec.js","sources":["test/common.coffee","test/arrow-keys.coffee","test/delete-key.coffee","test/enter-key.coffee","test/initialization.coffee","test/mouse-click.coffee","test/n-key.coffee","test/tab-key.coffee","test/tv4-interface.coffee"],"names":[],"mappings":"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","sourcesContent":["keyDown = ($el, which) ->\n  event = jQuery.Event(\"keydown\")\n  event.which = which\n  $el.trigger(event)\n","do ->\n  leftArrowPress = ($el) -> keyDown($el, 37)\n  upArrowPress = ($el) -> keyDown($el, 38)\n  rightArrowPress = ($el) -> keyDown($el, 39)\n  downArrowPress = ($el) -> keyDown($el, 40)\n  \n  expectOneSelected = (t) ->\n    selected = treema.getSelectedTreemas()\n    expect(selected.length).toBe(1)\n    expect(t).toBeDefined()\n    expect(selected[0].$el[0]).toBe(t.$el[0]) if t and selected.length is 1 \n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: ['string', 'array'] } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', ['123-456-7890']], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  addressTreema = treema.childrenTreemas.address\n  \n  beforeEach ->\n    treema.deselectAll()\n    phoneTreema.close()\n    \n  describe 'Down arrow key press', ->\n    it 'selects the top row if nothing is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      downArrowPress(treema.$el)\n      expect(nameTreema.isSelected()).toBeTruthy()\n      \n    it 'skips past closed collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      \n    it 'traverses open collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      phoneTreema.open()\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[0])\n#      downArrowPress(treema.$el)\n#      expectOneSelected(phoneTreema.childrenTreemas[1])\n#      downArrowPress(treema.$el)\n#      expectOneSelected(addressTreema)\n      \n    it 'does nothing if the last treema is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      addressTreema.select()\n      expectOneSelected(addressTreema)\n      downArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n  describe 'Up arrow key press', ->\n    it 'selects the bottom row if nothing is selected', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      upArrowPress(treema.$el)\n      expect(addressTreema.isSelected()).toBeTruthy()\n\n    it 'skips past closed collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n    it 'traverses open collections', ->\n      expect(treema.getSelectedTreemas().length).toBe(0)\n      phoneTreema.open()\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema.childrenTreemas[0])\n      upArrowPress(treema.$el)\n      expectOneSelected(phoneTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n\n    it 'wraps around if the first treema is selected', ->\n      nameTreema.select()\n      expectOneSelected(nameTreema)\n      upArrowPress(treema.$el)\n      expectOneSelected(addressTreema)\n\n  describe 'Right arrow key press', ->\n    it 'does nothing if the selected row isn\\'t a collection', ->\n      nameTreema.select()\n      expectOneSelected(nameTreema)\n      rightArrowPress(treema.$el)\n      expectOneSelected(nameTreema)\n      \n    it 'opens a collection if a collection is selected', ->\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      phoneTreema.select()\n      rightArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      \n  describe 'Left arrow key press', ->\n    it 'closes an open, selected collection', ->\n      phoneTreema.open()\n      phoneTreema.select()\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n    \n    it 'closes the selection if it can be closed, otherwise moves the selection up a level', ->\n      phoneTreema.open()\n      phoneTreema.childrenTreemas[0].select()\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n      \n    it 'affects one collection at a time, deepest first', ->\n      phoneTreema.open()\n      phoneTreema.childrenTreemas[1].open()\n      phoneTreema.childrenTreemas[1].childrenTreemas[0].select()\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.childrenTreemas[1].isOpen()).toBeTruthy()\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.childrenTreemas[1].isClosed()).toBeTruthy()\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema.childrenTreemas[1])\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isOpen()).toBeTruthy()\n      expectOneSelected(phoneTreema)\n\n      leftArrowPress(treema.$el)\n      expect(phoneTreema.isClosed()).toBeTruthy()\n      expectOneSelected(phoneTreema)","describe 'Delete key press', ->\n  deleteKeyPress = ($el) -> keyDown($el, 8)\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: ['string', 'array'] } }\n      address: { type: 'string' }\n    }\n  }\n  original_data = { name: 'Bob', numbers: ['401-401-1337', ['123-456-7890']], 'address': 'Mars' }\n  treema = nameTreema = addressTreema = phoneTreema = null\n  \n  rebuild = ->\n    copy = $.extend(true, {}, original_data)\n    treema = TreemaNode.make(null, {data: copy, schema: schema})\n    treema.build()\n    nameTreema = treema.childrenTreemas.name\n    addressTreema = treema.childrenTreemas.address\n    phoneTreema = treema.childrenTreemas.numbers\n\n  expectOneSelected = (t) ->\n    selected = treema.getSelectedTreemas()\n    expect(selected.length).toBe(1)\n    expect(selected[0]).toBe(t)\n\n  beforeEach ->\n    rebuild()\n  \n  it 'does nothing when nothing is selected', ->\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBe(original_data.name)\n    expect(treema.data.address).toBe(original_data.address)\n  \n  it 'removes a selected row', ->\n    nameTreema.select()\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBeUndefined()\n    expect(treema.childrenTreemas.name).toBeUndefined()\n    expect(treema.childrenTreemas.address).toBeTruthy()\n  \n  it 'removes all selected rows', ->\n    nameTreema.select()\n    addressTreema.toggleSelect()\n    deleteKeyPress(treema.$el)\n    expect(treema.data.name).toBeUndefined()\n    expect(treema.data.address).toBeUndefined()\n    expect(treema.childrenTreemas.name).toBeUndefined()\n    expect(treema.childrenTreemas.address).toBeUndefined()\n\n  it 'removes single elements of a collection one at a time, then the collection itself', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].open()\n    phoneTreema.childrenTreemas[0].select()\n    expect(treema.data.numbers.length).toBe(2)\n\n    # deletes '401...', selects ['123...'] (which is now at index 0)\n    # stays at the same level, does not enter the open collection\n    deleteKeyPress(treema.$el)\n    expect(treema.data.numbers.length).toBe(1)\n    expectOneSelected(phoneTreema.childrenTreemas[0])\n\n    # deletes ['123...'], selects numbers\n    # when there are no more elements, goes to the parent\n    deleteKeyPress(treema.$el)\n    expect(treema.data.numbers.length).toBe(0)\n    expectOneSelected(phoneTreema)\n\n    # deletes numbers, selects address\n    # when there's an element the one just deleted, it goes down\n    deleteKeyPress(treema.$el) \n    expect(treema.data.numbers).toBeUndefined()\n    expectOneSelected(addressTreema)\n\n    # deletes address, selects name\n    # when there's no element after the one just deleted, it goes up\n    deleteKeyPress(treema.$el) \n    expect(treema.data.address).toBeUndefined()\n    expectOneSelected(nameTreema)\n\n    # deletes name, nothing more to select\n    # when there are no more elements, select nothing\n    deleteKeyPress(treema.$el) \n    expect(treema.data.name).toBeUndefined()\n    expect(treema.getSelectedTreemas().length).toBe(0)\n    expect(Object.keys(treema.data).length).toBe(0)\n    \n  it 'removes a row if it\\'s being edited and there\\'s nothing in the focused input', ->\n    nameTreema.edit()\n    nameTreema.$el.find('input').val('')\n    deleteKeyPress(nameTreema.$el.find('input'))\n    expect(treema.data.name).toBeUndefined()\n    expectOneSelected(phoneTreema)\n\n  it 'performs normally if a focused input has value', ->\n    nameTreema.edit()\n    deleteKeyPress(nameTreema.$el.find('input'))\n    expect(treema.data.name).toBeTruthy()\n","describe 'Enter key press', ->\n  enterKeyPress = ($el) -> keyDown($el, 13)\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string', minLength: 4 } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  \n  afterEach ->\n    treema.endExistingEdits()\n    phoneTreema.close()\n  \n  it 'edits the last selected row', ->\n    nameTreema.select()\n    enterKeyPress(treema.$el)\n    expect(nameTreema.isEditing()).toBeTruthy()\n    \n  it 'saves the current row and goes on to the next value in the collection if there is one', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('4321')\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('4321')\n    \n  it 'traverses into and out of open collections', ->\n    phoneTreema.open()\n    nameTreema.edit()\n    enterKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    enterKeyPress(treema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    \n  it 'opens closed collections', ->\n    phoneTreema.select()\n    enterKeyPress(treema.$el)\n    expect(phoneTreema.isOpen()).toBeTruthy()\n    \n  it 'shows errors and moves on when saving an invalid row', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('1')\n    enterKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('1')\n    expect(treema.isValid()).toBeFalsy()\n\n  it 'goes backwards if shift is pressed', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].edit()\n\n    event = jQuery.Event(\"keydown\")\n    event.which = 13\n    event.shiftKey = true\n    phoneTreema.childrenTreemas[1].$el.trigger(event)\n\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n  \n  it 'edits the first child in a collection if a collection is selected', ->\n    phoneTreema.open()\n    phoneTreema.select()\n    enterKeyPress(phoneTreema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n","describe 'Initialization', ->\n\n  schema = { type: 'object', properties: { name: { type: 'string', 'default': 'Untitled'} } }\n  data = { }\n  el = $('<div></div>')\n\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  \n  it 'creates an $el if none is given', ->\n    expect(treema.$el).toBeDefined()\n    \n  it 'uses the jQuery element given', ->\n    elTreema = TreemaNode.make(el, {data: data, schema: schema})\n    expect(elTreema.$el).toBe(el)\n    \n  it 'grabs default data from an object schema', ->\n    noDataTreema = TreemaNode.make(null, {schema: schema})\n    expect(noDataTreema.data.name).toBe('Untitled')\n    \n  it 'opens up root collection nodes by default', ->\n    treema.build()\n    expect(treema.isOpen()).toBeTruthy()\n   ","describe 'Mouse click behavior', ->\n\n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string' } }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'] }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  \n  shiftClick = ($el) ->\n    event = jQuery.Event(\"click\")\n    event.shiftKey = true\n    $el.trigger(event)\n    \n  metaClick = ($el) ->\n    event = jQuery.Event(\"click\")\n    event.metaKey = true\n    $el.trigger(event)\n    \n  it 'starts editing if you click the value', ->\n    expect(nameTreema.isDisplaying()).toBeTruthy()\n    nameTreema.$el.find('.treema-value').click()\n    expect(nameTreema.isEditing()).toBeTruthy()\n    nameTreema.display()\n    \n  it 'opens a collection if you click the value', ->\n    expect(phoneTreema.isClosed()).toBeTruthy()\n    phoneTreema.$el.find('.treema-value').click()\n    expect(phoneTreema.isOpen()).toBeTruthy()\n    phoneTreema.close()\n    \n  it 'selects and unselects the row if you click something other than the value', ->\n    expect(nameTreema.isSelected()).toBeFalsy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeTruthy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeFalsy()\n\n  it 'selects along all open rows if you shift click', ->\n    phoneTreema.open()\n    nameTreema.$el.click()\n    shiftClick(phoneTreema.childrenTreemas[1].$el)\n    expect(nameTreema.isSelected())\n    expect(phoneTreema.isSelected())\n    expect(phoneTreema.childrenTreemas[0].isSelected())\n    expect(phoneTreema.childrenTreemas[1].isSelected())\n    treema.deselectAll()\n    phoneTreema.close()\n    \n  it 'keeps the clicked row selected if there are multiple selections to begin with', ->\n    nameTreema.$el.click()\n    shiftClick(phoneTreema.$el)\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    nameTreema.$el.click()\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeFalsy()\n    treema.deselectAll()\n    \n  it 'toggles the select state if you ctrl/meta click', ->\n    nameTreema.$el.click()\n    metaClick(phoneTreema.$el)\n    expect(nameTreema.isSelected()).toBeTruthy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    metaClick(nameTreema.$el)\n    expect(nameTreema.isSelected()).toBeFalsy()\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    treema.deselectAll()\n","describe '\"N\" key press', ->\n  nKeyPress = ($el) -> keyDown($el, 78)\n  enterKeyPress = ($el) -> keyDown($el, 13)\n\n  schema = {\n    type: 'array',\n    maxItems: 3,\n    items: { type: 'string' }\n  }\n  data = ['401-401-1337', '123-456-7890']\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n\n  it 'creates a new row for the currently selected collection', ->\n    treema.childrenTreemas[0].select()\n    expect(treema.childrenTreemas[2]).toBeUndefined()\n    nKeyPress(treema.childrenTreemas[0].$el)\n    expect(treema.childrenTreemas[2]).toBeUndefined()\n    enterKeyPress(treema.$el.find('input').val('410-555-1023'))\n    expect(treema.childrenTreemas[2]).not.toBeUndefined()\n    treema.childrenTreemas[2].display()\n    treema.childrenTreemas[2].select()\n    expect(treema.childrenTreemas[2]).not.toBeUndefined()\n    \n  it 'does not create a new row when there\\'s no more space', ->\n    expect(treema.data.length).toBe(3)\n    nKeyPress(treema.childrenTreemas[0].$el)\n    expect(treema.data.length).toBe(3)","# almost exactly the same as enter, except it keeps focus on a row that is invalid\n\ndescribe 'Tab key press', ->\n  tabKeyPress = ($el) -> keyDown($el, 9)\n  \n  schema = {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n      numbers: { type: 'array', items: { type: 'string', minLength: 4 } }\n      address: { type: 'string' }\n    }\n  }\n  data = { name: 'Bob', numbers: ['401-401-1337', '123-456-7890'], 'address': 'Mars' }\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n  treema.build()\n  nameTreema = treema.childrenTreemas.name\n  phoneTreema = treema.childrenTreemas.numbers\n  addressTreema = treema.childrenTreemas.address\n  \n  afterEach ->\n    treema.endExistingEdits()\n    phoneTreema.close()\n  \n  it 'edits the last selected row', ->\n    nameTreema.select()\n    tabKeyPress(treema.$el)\n    expect(nameTreema.isEditing()).toBeTruthy()\n\n  it 'saves the current row and goes on to the next value in the collection if there is one', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('4321')\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[0].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('4321')\n\n  it 'traverses into and out of open collections', ->\n    phoneTreema.open()\n    nameTreema.edit()\n    tabKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    tabKeyPress(treema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isEditing()).toBeTruthy()\n\n  it 'skips over closed collections', ->\n    nameTreema.edit()\n    tabKeyPress(nameTreema.$el)\n    expect(phoneTreema.isSelected()).toBeTruthy()\n    tabKeyPress(treema.$el)\n    expect(addressTreema.isEditing()).toBeTruthy()\n\n  it 'shows errors and stays put when saving an invalid row', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[0].edit()\n    phoneTreema.childrenTreemas[0].$el.find('input').val('1')\n    tabKeyPress(phoneTreema.childrenTreemas[0].$el)\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n    expect(treema.data.numbers[0]).toBe('1')\n    expect(treema.isValid()).toBeFalsy()\n\n  it 'goes backwards if shift is pressed', ->\n    phoneTreema.open()\n    phoneTreema.childrenTreemas[1].edit()\n\n    event = jQuery.Event(\"keydown\")\n    event.which = 9\n    event.shiftKey = true\n    phoneTreema.childrenTreemas[1].$el.trigger(event)\n\n    expect(phoneTreema.childrenTreemas[1].isDisplaying()).toBeTruthy()\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n\n  it 'edits the first child in a collection if a collection is selected', ->\n    phoneTreema.open()\n    phoneTreema.select()\n    tabKeyPress(phoneTreema.$el)\n    expect(phoneTreema.childrenTreemas[0].isEditing()).toBeTruthy()\n","describe 'TV4 Interface', ->\n  \n  schema = { type: 'number' }\n  data = 'NaN'\n  treema = TreemaNode.make(null, {data: data, schema: schema})\n\n  it 'can check data validity', ->\n    expect(treema.isValid()).toBe false\n    \n  it 'returns errors', ->\n    expect(treema.getErrors().length).toBe 1"]}